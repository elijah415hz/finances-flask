{"version":3,"sources":["components/InputRow.tsx","components/StaticRow.tsx","components/Table.tsx","utils/API.tsx","pages/Home.tsx","pages/Login.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputRow","props","useState","Amount","state","setState","makeDataList","propsState","id","map","entry","value","name","handleInputRowChange","event","target","useEffect","fields","filter","column","includes","onBlur","e","handleChange","i","onChange","className","list","sourcesState","personsState","narrowState","broadState","onClick","deleteEntry","entry_id","StaticRow","Table","schema","replace","data","form","setPersonsState","setSourcesState","setBroadState","setNarrowState","API","expenses","token","yearMonthObj","fetch","year","month","headers","deleteExpenses","method","then","res","text","deleteIncome","income","pivot","wallchart","sources","json","persons","narrow","broad","login","body","JSON","stringify","checkAuth","Home","setToken","formState","setFormState","Date","Source","Person","NaN","source_id","earner_id","incomeTableState","setIncomeTableState","Vendor","Broad_category","Narrow_category","Notes","expensesTableState","setExpensesTableState","pivotTableState","setPivotTableState","formatDates","date","getFullYear","getMonth","toString","length","day","getDate","dateString","handleFormChange","a","preventDefault","route","response","console","error","assignId","dataListItem","localStorage","getItem","newExpensesTableStateData","newIncomeTableStateData","newToken","getDataLists","removeItem","window","location","reload","src","alt","onSubmit","htmlFor","type","placeholder","index","updatedRow","Login","username","password","loginFormState","setLoginFormState","failure","setFailure","inputChange","isLoggedIn","to","setItem","setIsLoggedIn","catch","err","ProtectedRoute","Component","component","rest","render","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c75b1721.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\ninterface tableDataEntry {\r\n    Amount: string,\r\n    Date?: string,\r\n    Source?: string,\r\n    Person?: string,\r\n    id?: number,\r\n    source_id?: number,\r\n    earner_id?: number,\r\n    Vendor?: string,\r\n    Broad_category?: string,\r\n    Narrow_category?: string,\r\n    Notes?: string,\r\n    entry_id?: number\r\n}\r\n\r\ninterface dataListStateType {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nexport default function InputRow(props:\r\n    {\r\n        entry: tableDataEntry,\r\n        i: number,\r\n        fields: { name: string }[],\r\n\r\n        sourcesState?: dataListStateType[],\r\n        personsState?: dataListStateType[],\r\n        broadState?: dataListStateType[],\r\n        narrowState?: dataListStateType[],\r\n        handleChange: Function,\r\n        setSourcesState?: Function,\r\n        setPersonsState?: Function,\r\n        setBroadState?: Function,\r\n        setNarrowState?: Function,\r\n        deleteEntry: Function\r\n    }) {\r\n\r\n    const [state, setState] = useState<tableDataEntry>({Amount: \"\"})\r\n\r\n    function makeDataList(propsState: dataListStateType[], id: string) {\r\n        return (\r\n            <datalist id={id}>\r\n                {propsState.map((entry: dataListStateType) => {\r\n                    return (\r\n                        <option\r\n                            value={entry.name}\r\n                            key={entry.id}\r\n                        />\r\n                    )\r\n                })}\r\n            </datalist>\r\n        )\r\n    }\r\n\r\n    function handleInputRowChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        let {name, value} = event.target;\r\n        setState({...state, [name]: value})\r\n    }\r\n\r\n    useEffect(() => {\r\n        setState(props.entry)\r\n    }, [props.entry])\r\n\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                {props.fields\r\n                    .filter(column => !column.name.includes(\"id\"))\r\n                    .map(column => {\r\n                        return (\r\n                            <td>\r\n                                {column.name === 'Amount' ? <span>$</span> : null}\r\n                                <input\r\n                                    name={column.name}\r\n                                    onBlur={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                        props.handleChange(e, props.i)\r\n                                    }}\r\n                                    onChange={handleInputRowChange}\r\n                                    className=\"tableInput\"\r\n                                    value={state[column.name as keyof tableDataEntry] || \"\"}\r\n                                    list={column.name}\r\n                                />\r\n                                {column.name === 'Source' && props.sourcesState ? (\r\n                                    makeDataList(props.sourcesState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Person' && props.personsState ? (\r\n                                    makeDataList(props.personsState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Narrow_category' && props.narrowState ? (\r\n                                    makeDataList(props.narrowState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Broad_category' && props.broadState ? (\r\n                                    makeDataList(props.broadState, column.name)\r\n                                ) : null}\r\n                            </td>\r\n                        )\r\n                    })}\r\n                    <td>\r\n                        <button onClick={()=> props.deleteEntry(state.entry_id || state.id)}>Delete</button>\r\n                    </td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}","import React from 'react'\r\n\r\ninterface tableDataEntry {\r\n    Amount: string,\r\n    Date?: string,\r\n    Source?: string,\r\n    Person?: string,\r\n    id?: number,\r\n    source_id?: number,\r\n    earner_id?: number,\r\n    Vendor?: string,\r\n    Broad_category?: string,\r\n    Narrow_category?: string,\r\n    Notes?: string,\r\n    entry_id?: number\r\n}\r\n\r\nexport default function StaticRow(props:\r\n    {\r\n        entry: tableDataEntry,\r\n        i: number,\r\n        fields: { name: string }[],\r\n    }) {\r\n\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                {props.fields\r\n                    .filter(column => !column.name.includes(\"id\"))\r\n                    .map(column => {\r\n                        return (\r\n                            <td key={props.i + column.name}>\r\n                                {column.name === 'Amount' ? <span>$</span> : null}\r\n                                <span\r\n                                    className=\"tableInput\"\r\n                                >{props.entry[column.name as keyof tableDataEntry] || \"\"}\r\n                                </span>\r\n\r\n                            </td>\r\n                        )\r\n                    })}\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}","import React from 'react'\r\nimport InputRow from './InputRow'\r\nimport StaticRow from './StaticRow'\r\n\r\ninterface tableDataEntry {\r\n    Amount: string,\r\n    Date?: string,\r\n    Source?: string,\r\n    Person?: string,\r\n    id?: number,\r\n    source_id?: number,\r\n    earner_id?: number,\r\n    Vendor?: string,\r\n    Broad_category?: string,\r\n    Narrow_category?: string,\r\n    Notes?: string,\r\n    entry_id?: number\r\n}\r\n\r\ninterface dataListStateType {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nexport default function Table(props:\r\n    {\r\n        state:\r\n        {\r\n            schema:\r\n            {\r\n                fields: { name: string }[]\r\n            },\r\n            data: tableDataEntry[]\r\n\r\n        },\r\n        sourcesState?: dataListStateType[],\r\n        personsState?: dataListStateType[],\r\n        broadState?: dataListStateType[],\r\n        narrowState?: dataListStateType[],\r\n        handleChange: Function,\r\n        setSourcesState?: Function,\r\n        setPersonsState?: Function,\r\n        setBroadState?: Function,\r\n        setNarrowState?: Function,\r\n        deleteEntry: Function,\r\n        form?: string\r\n    }) {\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    {props.state.schema.fields\r\n                        .filter(column => !column.name.includes(\"id\"))\r\n                        .map(column => {\r\n                            return (\r\n                                <th key={column.name}>\r\n                                    {column.name.replace(\"_\", \" \")}\r\n                                </th>\r\n                            )\r\n                        })}\r\n                </tr>\r\n            </thead>\r\n            {(props.state.data).map((entry: tableDataEntry, i: number) => {\r\n                return props.form === \"pivot\" ?\r\n                    <StaticRow\r\n                        entry={entry}\r\n                        i={i}\r\n                        key={entry.entry_id || entry.id}\r\n                        fields={props.state.schema.fields}\r\n                    /> :\r\n                    <InputRow\r\n                        entry={entry}\r\n                        i={i}\r\n                        key={i}\r\n                        fields={props.state.schema.fields}\r\n                        handleChange={props.handleChange}\r\n                        sourcesState={props.sourcesState}\r\n                        personsState={props.personsState}\r\n                        broadState={props.broadState}\r\n                        narrowState={props.narrowState}\r\n\r\n                        setPersonsState={props.setPersonsState}\r\n                        setSourcesState={props.setSourcesState}\r\n                        setBroadState={props.setBroadState}\r\n                        setNarrowState={props.setNarrowState}\r\n                        deleteEntry={props.deleteEntry}\r\n                    />\r\n            })}\r\n\r\n        </table>\r\n    )\r\n}","\r\ninterface sourcesStateType {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nconst API = {\r\n    expenses: function (token: string | null, yearMonthObj: { form: string, year: string, month: string }): Promise<Response> {\r\n        return fetch(`/api/expenses?year=${yearMonthObj.year}&month=${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        })\r\n    },\r\n    deleteExpenses: function (token: string | null, id: number | undefined): Promise<Response | string> {\r\n        return fetch(`/api/expenses/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>res.text())\r\n    },\r\n    deleteIncome: function (token: string | null, id: number | undefined): Promise<Response | string> {\r\n        return fetch(`/api/income/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>res.text())\r\n    },\r\n    income: function (token: string | null, yearMonthObj: { form: string, year: string, month: string }): Promise<Response> {\r\n        return fetch(`/api/income?year=${yearMonthObj.year}&month=${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        })\r\n    },\r\n    pivot: function (token: string | null, yearMonthObj: { form: string, year: string, month: string }): Promise<Response> {\r\n        return fetch(`/api/pivot?year=${yearMonthObj.year}&month=${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        })\r\n    },\r\n    wallchart: function (token: string | null,): Promise<Response> {\r\n        return fetch('/api/wallchart', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        })\r\n    },\r\n    sources: function (token: string | null,): Promise<{ data: sourcesStateType[] }> {\r\n        return fetch('/api/sources', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => res.json())\r\n    },\r\n    persons: function (token: string | null,): Promise<{ data: sourcesStateType[] }> {\r\n        return fetch('/api/persons', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => res.json())\r\n    },\r\n    narrow: function (token: string | null,): Promise<{ data: sourcesStateType[] }> {\r\n        return fetch('/api/narrows', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => res.json())\r\n    },\r\n    broad: function (token: string | null,): Promise<{ data: sourcesStateType[] }> {\r\n        return fetch('/api/broads', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => res.json())\r\n    },\r\n    login: function (data: { username: string, password: string }): Promise<{ token: string }> {\r\n        return fetch('/api/login', {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res => res.json())\r\n    },\r\n    checkAuth: function (token: string | null): Promise<Response> {\r\n        return fetch(`/api/checkAuth`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => res.json())\r\n    }\r\n}\r\n\r\nexport default API","import React, { useState, useEffect } from 'react';\r\nimport Table from '../components/Table';\r\nimport API from '../utils/API'\r\n\r\nfunction Home() {\r\n    interface formStateType {\r\n        form: \"expenses\" | \"income\" | \"pivot\",\r\n        year: string,\r\n        month: string\r\n    }\r\n\r\n    interface expensesDataEntry {\r\n        Amount: string,\r\n        Date: string,\r\n        Source: string,\r\n        Vendor: string,\r\n        Broad_category: string,\r\n        Narrow_category: string,\r\n        Person: string,\r\n        Notes: string,\r\n        entry_id: number\r\n    }\r\n\r\n    interface incomeDataEntry {\r\n        Amount: string,\r\n        Date: string,\r\n        Source: string,\r\n        Person: string,\r\n        id: number,\r\n        source_id: number,\r\n        earner_id: number\r\n    }\r\n\r\n    interface pivotDataEntry {\r\n        Broad_category: string,\r\n        Narrow_category: string,\r\n        Amount: string\r\n    }\r\n\r\n\r\n    interface dataListStateType {\r\n        id: number,\r\n        name: string\r\n    }\r\n\r\n    type InputName = \"Person\" | \"Source\" | \"Broad_category\" | \"Narrow_category\"\r\n\r\n    const [token, setToken] = useState(\"\")\r\n\r\n    const [formState, setFormState] = useState<formStateType>(\r\n        {\r\n            form: \"income\",\r\n            year: \"\",\r\n            month: \"\"\r\n        }\r\n    )\r\n\r\n    const [incomeTableState, setIncomeTableState] = useState<{ schema: { fields: [] }, data: incomeDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Date: \"\",\r\n                Source: \"\",\r\n                Person: \"\",\r\n                id: NaN,\r\n                source_id: NaN,\r\n                earner_id: NaN\r\n            }]\r\n        }\r\n    )\r\n\r\n    const [expensesTableState, setExpensesTableState] = useState<{ schema: { fields: [] }, data: expensesDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Date: \"\",\r\n                Source: \"\",\r\n                Vendor: \"\",\r\n                Broad_category: \"\",\r\n                Narrow_category: \"\",\r\n                Person: \"\",\r\n                Notes: \"\",\r\n                entry_id: NaN\r\n            }]\r\n        }\r\n\r\n    )\r\n    const [pivotTableState, setPivotTableState] = useState<{ schema: { fields: [] }, data: pivotDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Broad_category: \"\",\r\n                Narrow_category: \"\"\r\n            }]\r\n        }\r\n    )\r\n\r\n    // State for datalists\r\n    const [sourcesState, setSourcesState] = useState<dataListStateType[]>([])\r\n    const [personsState, setPersonsState] = useState<dataListStateType[]>([])\r\n    const [broadState, setBroadState] = useState<dataListStateType[]>([])\r\n    const [narrowState, setNarrowState] = useState<dataListStateType[]>([])\r\n\r\n    function formatDates(entry:\r\n        {\r\n            Date: string\r\n        }): {\r\n            Date: string\r\n        } {\r\n        let date = new Date(entry.Date);\r\n        let year = date.getFullYear();\r\n        let month = (1 + date.getMonth()).toString();\r\n        month = month.length > 1 ? month : '0' + month;\r\n        let day = date.getDate().toString();\r\n        day = day.length > 1 ? day : '0' + day;\r\n        let dateString = month + '/' + day + '/' + year;\r\n        entry.Date = dateString\r\n        return entry\r\n    }\r\n\r\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>): void {\r\n        let { name, value } = event.target;\r\n        setFormState({ ...formState, [name]: value })\r\n    }\r\n\r\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\r\n        try {\r\n            event.preventDefault()\r\n            let route = formState.form\r\n            let response = await (await API[route](token, formState)).json()\r\n            // Formatting the dates the hard way because javascript doesn't support strftime...\r\n            response.data = response.data.map(formatDates)\r\n            switch (route) {\r\n                case \"expenses\":\r\n                    setExpensesTableState(response)\r\n                    break;\r\n                case \"income\":\r\n                    setIncomeTableState(response)\r\n                    break;\r\n                case \"pivot\":\r\n                    setPivotTableState(response)\r\n                    break;\r\n            }\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    function assignId(\r\n        name: InputName,\r\n        value: string) {\r\n\r\n        let state;\r\n        let id;\r\n\r\n        switch (name) {\r\n            case \"Person\":\r\n                state = personsState;\r\n                id = 'earner_id'\r\n                break;\r\n            case \"Source\":\r\n                state = sourcesState;\r\n                id = 'source_id'\r\n                break;\r\n            case \"Broad_category\":\r\n                state = broadState;\r\n                id = 'broad_category_id'\r\n                break;\r\n            case \"Narrow_category\":\r\n                state = narrowState;\r\n                id = 'narrow_category_id'\r\n                break;\r\n        }\r\n        let dataListItem = state.filter((i: dataListStateType) => i.name === value)[0]\r\n        if (dataListItem) {\r\n            return { id: id, dataListItem: dataListItem }\r\n        } else {\r\n            return { id: null, dataListItem: null }\r\n        }\r\n    }\r\n\r\n    function handleExpensesChange(event: React.ChangeEvent<HTMLInputElement>, index: number): void {\r\n        let { name, value } = event.target;\r\n        let newExpensesTableStateData: expensesDataEntry[] = [...expensesTableState.data]\r\n        let updatedRow: expensesDataEntry = { ...newExpensesTableStateData[index], [name]: value }\r\n        if (name === \"Person\" || name === \"Broad_category\" || name === \"Narrow_category\") {\r\n            let { id, dataListItem } = assignId(name as InputName, value)\r\n            if (id && dataListItem) {\r\n                updatedRow = { ...updatedRow, [id]: dataListItem.id }\r\n            }\r\n        }\r\n        newExpensesTableStateData[index] = updatedRow\r\n        setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\r\n    }\r\n\r\n    function handleIncomeChange(event: React.ChangeEvent<HTMLInputElement>, index: number): void {\r\n        let { name, value } = event.target;\r\n        let newIncomeTableStateData: incomeDataEntry[] = [...incomeTableState.data]\r\n        let updatedRow: incomeDataEntry = { ...newIncomeTableStateData[index], [name]: value }\r\n        if (name === \"Person\" || name === \"Source\") {\r\n            let { id, dataListItem } = assignId(name as InputName, value)\r\n            if (id && dataListItem) {\r\n                updatedRow = { ...updatedRow, [id]: dataListItem.id }\r\n            }\r\n        }\r\n        newIncomeTableStateData[index] = updatedRow\r\n        setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\r\n    }\r\n\r\n    async function deleteEntry(id: number | undefined) {\r\n        let token = localStorage.getItem(\"token\");\r\n        try {\r\n            if (formState.form === \"expenses\") {\r\n                await API.deleteExpenses(token, id);\r\n                let newExpensesTableStateData = expensesTableState.data.filter(entry => entry.entry_id !== id)\r\n                setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\r\n            } else if (formState.form === \"income\") {\r\n                await API.deleteIncome(token, id);\r\n                let newIncomeTableStateData = incomeTableState.data.filter(entry => entry.id !== id)\r\n                setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\r\n            }\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n\r\n    }\r\n\r\n    function logout() {\r\n        localStorage.removeItem(\"token\")\r\n        window.location.reload()\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        async function getDataLists(): Promise<void> {\r\n            let newToken = localStorage.getItem(\"token\")\r\n            if (newToken) {\r\n                setToken(newToken)\r\n            }\r\n            if (sourcesState.length === 0) {\r\n                let { data } = await API.sources(newToken)\r\n                setSourcesState(data)\r\n            }\r\n            if (personsState.length === 0) {\r\n                let res = await API.persons(newToken)\r\n                setPersonsState(res.data)\r\n            }\r\n            if (narrowState.length === 0) {\r\n                let res = await API.narrow(newToken)\r\n                setNarrowState(res.data)\r\n            }\r\n            if (broadState.length === 0) {\r\n                let res = await API.broad(newToken)\r\n                setBroadState(res.data)\r\n            }\r\n        }\r\n        getDataLists()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"Home\">\r\n            <header className=\"header\">\r\n                <button className=\"logout\" onClick={logout}>Logout</button>\r\n                <h1>Finances!</h1>\r\n                {token ?\r\n                    <img src=\"/api/wallchart\" alt=\"Wall Chart\" />\r\n                    : null\r\n                }\r\n                <form onSubmit={handleFormSubmit} className=\"form-inline\">\r\n                    <select name=\"form\" value={formState.form} onChange={handleFormChange}>\r\n                        <option value=\"income\">Income</option>\r\n                        <option value=\"expenses\">Expenses</option>\r\n                        <option value=\"pivot\">Pivot Table</option>\r\n                    </select>\r\n                    <label htmlFor=\"year2\">Year</label>\r\n                    <input\r\n                        onChange={handleFormChange}\r\n                        value={formState.year}\r\n                        type=\"text\"\r\n                        id=\"year2\"\r\n                        className=\"form-control\"\r\n                        name=\"year\"\r\n                        placeholder=\"YYYY\"\r\n                    />\r\n                    <label htmlFor=\"month2\">Month</label>\r\n                    <input\r\n                        onChange={handleFormChange}\r\n                        value={formState.month}\r\n                        type=\"text\"\r\n                        id=\"month2\"\r\n                        className=\"form-control\"\r\n                        name=\"month\"\r\n                        placeholder=\"MM\" />\r\n                    <button className=\"btn btn-success\">Submit</button>\r\n                </form>\r\n            </header>\r\n            <body>\r\n                {formState.form === \"income\" && incomeTableState.data[0]?.id ? (\r\n                    <Table\r\n                        state={incomeTableState}\r\n                        sourcesState={sourcesState}\r\n                        personsState={personsState}\r\n                        handleChange={handleIncomeChange}\r\n                        setSourcesState={setSourcesState}\r\n                        setPersonsState={setPersonsState}\r\n                        deleteEntry={deleteEntry}\r\n                        form={formState.form}\r\n                    />\r\n                ) : null}\r\n                {formState.form === \"expenses\" && expensesTableState.data[0]?.entry_id ? (\r\n                    <Table\r\n                        state={expensesTableState}\r\n                        personsState={personsState}\r\n                        broadState={broadState}\r\n                        narrowState={narrowState}\r\n                        handleChange={handleExpensesChange}\r\n                        setPersonsState={setPersonsState}\r\n                        setBroadState={setBroadState}\r\n                        setNarrowState={setNarrowState}\r\n                        deleteEntry={deleteEntry}\r\n                        form={formState.form}\r\n                    />\r\n                ) : null}\r\n                {formState.form === \"pivot\" && pivotTableState ? (\r\n                    <Table\r\n                        state={pivotTableState}\r\n                        deleteEntry={deleteEntry}\r\n                        handleChange={() => false}\r\n                        form={formState.form}\r\n                    />\r\n                ) : null}\r\n            </body>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useState } from 'react'\r\nimport {Redirect } from 'react-router-dom'\r\nimport API from '../utils/API'\r\n\r\nexport default function Login(props: {isLoggedIn: boolean, setIsLoggedIn: Function}) {\r\n    const [loginFormState, setLoginFormState] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n    });\r\n\r\n    const [failure, setFailure] = useState(false)\r\n\r\n    const inputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        setLoginFormState({\r\n            ...loginFormState,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const formSubmit = (event: React.SyntheticEvent) => {\r\n        event.preventDefault();\r\n        API.login(loginFormState).then(newToken => {\r\n            localStorage.setItem(\"token\", newToken.token)\r\n            props.setIsLoggedIn(true)\r\n            \r\n        }).catch(err => setFailure(true))\r\n    }\r\n\r\n    if (props.isLoggedIn) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"Login\">\r\n                <form className=\"LoginForm\" onSubmit={formSubmit}>\r\n                    <h4>Login</h4>\r\n                    <div className=\"Response\">\r\n                        {failure ? <p>Incorrect username or password</p> : null}\r\n                    </div>\r\n                    <input\r\n                        onChange={inputChange}\r\n                        value={loginFormState.username}\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        placeholder=\"username\"\r\n                    />\r\n                    <input\r\n                        onChange={inputChange}\r\n                        value={loginFormState.password}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\"password\"\r\n                    />\r\n                    <button className=\"Btn\" name=\"login\" type=\"submit\">Login</button>\r\n                </form>\r\n            </div>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react'\nimport { BrowserRouter as Router, Route, Redirect, RouteComponentProps } from 'react-router-dom'\nimport Home from './pages/Home'\nimport Login from './pages/Login'\nimport API from './utils/API'\nimport './App.css';\n\n// import Auth from './utils/Auth'\n\n\nconst ProtectedRoute = ({ component: Component, isLoggedIn, ...rest }: {\n  path: string,\n  isLoggedIn: boolean,\n  setIsLoggedIn: Function,\n  component: React.FunctionComponent<RouteComponentProps>,\n}): JSX.Element => (\n    <Route {...rest} render={props => (\n      isLoggedIn\n          ? <Component {...props} />\n          : <Redirect to='/login' />\n      )\n    } />\n\n  )\n\nexport default function App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\")\n    API.checkAuth(token)\n      .then(res=>setIsLoggedIn(true))\n      .catch(err=>{\n        setIsLoggedIn(false)\n        localStorage.removeItem(\"token\")\n      })\n  }, [])\n\n  return (\n    <Router>\n      <ProtectedRoute path=\"/\"\n        isLoggedIn={isLoggedIn}\n        setIsLoggedIn={setIsLoggedIn}\n        component={Home}\n      />\n      <Route exact path=\"/login\">\n        <Login\n          isLoggedIn={isLoggedIn}\n          setIsLoggedIn={setIsLoggedIn} />\n      </Route>\n    </Router>\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}