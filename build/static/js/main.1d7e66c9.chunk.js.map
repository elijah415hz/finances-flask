{"version":3,"sources":["components/InputRow.tsx","components/StaticRow.tsx","components/Table.tsx","utils/API.tsx","pages/Home.tsx","pages/Login.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","palette","common","black","color","white","body","fontSize","padding","maxWidth","TableCell","StyledTableRow","root","action","hover","paddingLeft","TableRow","InputRow","props","useState","Amount","state","setState","makeDataList","propsState","id","map","entry","value","name","handleInputRowChange","event","target","useEffect","fields","filter","column","includes","onBlur","e","handleChange","i","onChange","className","list","style","width","dataLists","source","person_earner","narrow_category","broad_category","vendor","IconButton","onClick","handleUpdate","aria-label","deleteEntry","entry_id","StaticRow","ReportTable","primary","main","classes","makeStyles","table","minWidth","useStyles","TableContainer","component","Paper","Table","TableHead","schema","replace","TableBody","data","form","checkStatus","res","parseMethod","status","Error","json","text","API","expenses","token","yearMonthObj","fetch","year","month","headers","then","deleteExpenses","method","updateExpenses","JSON","stringify","income","updateIncome","deleteIncome","pivot","dataList","login","checkAuth","Home","React","useContext","AuthContext","Auth","setAuth","Date","now","getUTCFullYear","getUTCMonth","formState","setFormState","Source","Person","NaN","source_id","earner_id","incomeTableState","setIncomeTableState","Vendor","Broad_category","Narrow_category","Notes","expensesTableState","setExpensesTableState","pivotTableState","setPivotTableState","dataListsState","setDataListsState","formatDates","date","toString","length","day","getUTCDate","dateString","handleFormChange","a","preventDefault","route","response","message","type","assignId","dataListItem","index","newExpensesTableStateData","updatedRow","err","console","error","log","newIncomeTableStateData","formControl","margin","spacing","selectEmpty","marginTop","display","justifyContent","flexWrap","datalists","getDataLists","Button","variant","textAlign","src","alt","onSubmit","FormControl","InputLabel","htmlFor","Select","label","labelId","MenuItem","TextField","Login","username","password","loginFormState","setLoginFormState","failure","setFailure","inputChange","formSubmit","newToken","payload","user","loggedIn","to","ProtectedRoute","Component","rest","render","createContext","reducer","localStorage","setItem","clear","App","useReducer","getItem","catch","Provider","path","setLoggedIn","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1d7e66c9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { dataListStateType, tableDataEntry, allDataListsType } from '../interfaces/Interfaces'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { IconButton, TableCell, TableRow } from '@material-ui/core'\r\nimport { withStyles, makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\n\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n      padding: 0,\r\n      maxWidth: '10ch',\r\n    },\r\n  }),\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n      '& input': {\r\n          backgroundColor: 'inherit',\r\n          paddingLeft: 0,\r\n      }\r\n    },\r\n  }),\r\n)(TableRow);\r\n\r\nexport default function InputRow(props:\r\n    {\r\n        entry: tableDataEntry,\r\n        i: number,\r\n        fields: { name: string }[],\r\n        dataLists?: allDataListsType\r\n        handleChange: Function,\r\n        handleUpdate: Function,\r\n        deleteEntry: Function\r\n    }) {\r\n\r\n    const [state, setState] = useState<tableDataEntry>({ Amount: \"\" })\r\n\r\n    function makeDataList(propsState: dataListStateType[], id: string) {\r\n        return (\r\n            <datalist id={id}>\r\n                {propsState.map((entry: dataListStateType) => {\r\n                    return (\r\n                        <option\r\n                            value={entry.name}\r\n                            key={entry.id}\r\n                        />\r\n                    )\r\n                })}\r\n            </datalist>\r\n        )\r\n    }\r\n\r\n    function handleInputRowChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        let { name, value } = event.target;\r\n        setState({ ...state, [name]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setState(props.entry)\r\n    }, [props.entry])\r\n\r\n    return (\r\n        <StyledTableRow>\r\n            {props.fields\r\n                .filter(column => !column.name.includes(\"id\"))\r\n                .map(column => {\r\n                    return (\r\n                        <StyledTableCell \r\n                            \r\n                        >\r\n                            {column.name === 'Amount' ? <span>$</span> : null}\r\n                            <input\r\n                                name={column.name}\r\n                                onBlur={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                    props.handleChange(e, props.i)\r\n                                }}\r\n                                onChange={handleInputRowChange}\r\n                                className=\"tableInput\"\r\n                                value={state[column.name as keyof tableDataEntry] || \"\"}\r\n                                list={column.name}\r\n                                style={{width: '80%'}}\r\n                                // style={{width: `${(state[column.name as keyof tableDataEntry]?.toString().length || 12) + 3.5}ch`}}\r\n                            />\r\n                            {column.name === 'Source' && props.dataLists?.source ? (\r\n                                makeDataList(props.dataLists?.source, column.name)\r\n                            ) : null}\r\n                            {column.name === 'Person' && props.dataLists?.person_earner ? (\r\n                                makeDataList(props.dataLists?.person_earner, column.name)\r\n                            ) : null}\r\n                            {column.name === 'Narrow_category' && props.dataLists?.narrow_category ? (\r\n                                makeDataList(props.dataLists?.narrow_category, column.name)\r\n                            ) : null}\r\n                            {column.name === 'Broad_category' && props.dataLists?.broad_category ? (\r\n                                makeDataList(props.dataLists?.broad_category, column.name)\r\n                            ) : null}\r\n                            {column.name === 'Vendor' && props.dataLists?.vendor ? (\r\n                                makeDataList(props.dataLists?.vendor, column.name)\r\n                            ) : null}\r\n                        </StyledTableCell>\r\n                    )\r\n                })}\r\n            <StyledTableCell>\r\n                <IconButton\r\n                    color=\"primary\"\r\n                    onClick={() => props.handleUpdate(props.i)}\r\n                >\r\n                    <SaveIcon />\r\n                </IconButton>\r\n            </StyledTableCell>\r\n            <StyledTableCell>\r\n                <IconButton\r\n                    aria-label=\"delete\"\r\n                    color=\"secondary\"\r\n                    onClick={() => props.deleteEntry(state.entry_id || state.id)}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </StyledTableCell>\r\n        </StyledTableRow>\r\n    )\r\n}","import React from 'react'\r\nimport type {tableDataEntry} from '../interfaces/Interfaces'\r\n\r\nexport default function StaticRow(props:\r\n    {\r\n        entry: tableDataEntry,\r\n        i: number,\r\n        fields: { name: string }[],\r\n    }) {\r\n\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                {props.fields\r\n                    .filter(column => !column.name.includes(\"id\"))\r\n                    .map(column => {\r\n                        return (\r\n                            <td key={props.i + column.name}>\r\n                                {column.name === 'Amount' ? <span>$</span> : null}\r\n                                <span\r\n                                    className=\"tableInput\"\r\n                                >{props.entry[column.name as keyof tableDataEntry] || \"\"}\r\n                                </span>\r\n\r\n                            </td>\r\n                        )\r\n                    })}\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}","import React from 'react'\r\nimport InputRow from './InputRow'\r\nimport StaticRow from './StaticRow'\r\nimport type { tableDataEntry, allDataListsType } from \"../interfaces/Interfaces\"\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport { makeStyles, createStyles, withStyles, lighten, Theme } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nexport default function ReportTable(props:\r\n    {\r\n        state:\r\n        {\r\n            schema:\r\n            {\r\n                fields: { name: string }[]\r\n            },\r\n            data: tableDataEntry[]\r\n\r\n        },\r\n        dataLists?: allDataListsType\r\n        handleChange: Function,\r\n        handleUpdate: Function,\r\n        deleteEntry: Function,\r\n        form?: string\r\n    }) {\r\n\r\n    const StyledTableCell = withStyles((theme: Theme) =>\r\n        createStyles({\r\n            head: {\r\n                backgroundColor: theme.palette.primary.main,\r\n                color: theme.palette.common.white,\r\n            },\r\n\r\n        }),\r\n    )(TableCell);\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            table: {\r\n                minWidth: 650,\r\n            },\r\n        })\r\n    );\r\n    const classes = useStyles();\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {props.state.schema.fields\r\n                            .filter(column => !column.name.includes(\"id\"))\r\n                            .map(column => {\r\n                                return (\r\n                                    <StyledTableCell key={column.name}>\r\n                                        {column.name.replace(\"_\", \" \")}\r\n                                    </StyledTableCell>\r\n                                )\r\n                            })}\r\n                        <StyledTableCell><span>Save</span></StyledTableCell>\r\n                        <StyledTableCell><span>Delete</span></StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className=\"tableBody\">\r\n                    {(props.state.data).map((entry: tableDataEntry, i: number) => {\r\n                        return props.form === \"pivot\" ?\r\n                            <StaticRow\r\n                                entry={entry}\r\n                                i={i}\r\n                                key={entry.entry_id || entry.id}\r\n                                fields={props.state.schema.fields}\r\n                            /> :\r\n                            <InputRow\r\n                                entry={entry}\r\n                                i={i}\r\n                                key={i}\r\n                                fields={props.state.schema.fields}\r\n                                handleChange={props.handleChange}\r\n                                handleUpdate={props.handleUpdate}\r\n                                dataLists={props.dataLists}\r\n                                deleteEntry={props.deleteEntry}\r\n                            />\r\n                    })}\r\n                </TableBody>\r\n\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}","import type {\r\n    allDataListsType, \r\n    formStateType, \r\n    tableDataEntry, \r\n    tableType} from '../interfaces/Interfaces'\r\n\r\n\r\nfunction checkStatus<T>(res: Response, parseMethod: string): Promise<T> {\r\n    if (res.status === 401) {\r\n        throw new Error(\"Unauthorized\")\r\n    }\r\n    if (parseMethod === 'json'){\r\n        return res.json() as Promise<T>\r\n    } else {\r\n        return res.text() as unknown as Promise<T>\r\n    }\r\n}\r\n\r\nconst API = {\r\n    expenses: function (token: string | null, yearMonthObj: formStateType): Promise<{schema: { fields: [] }, data: tableDataEntry[]}> {\r\n        return fetch(`/api/expenses/${yearMonthObj.year}/${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<tableType>(res, 'json'))\r\n    },\r\n    deleteExpenses: function (token: string | null, id: number | undefined): Promise<Response | string> {\r\n        return fetch(`/api/expenses/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    updateExpenses: function (token: string | null, data: tableDataEntry): Promise<Response | string> {\r\n        return fetch(`/api/expenses/${data.entry_id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    income: function (token: string | null, yearMonthObj: formStateType): Promise<{schema: { fields: [] }, data: tableDataEntry[]}> {\r\n        return fetch(`/api/income/${yearMonthObj.year}/${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<tableType>(res, 'json'))\r\n    },\r\n    updateIncome: function (token: string | null, data: tableDataEntry): Promise<Response | string> {\r\n        return fetch(`/api/income/${data.id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    deleteIncome: function (token: string | null, id: number | undefined): Promise<Response | string> {\r\n        return fetch(`/api/income/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    pivot: function (token: string | null, yearMonthObj: formStateType): Promise<{schema: { fields: [] }, data: tableDataEntry[]}> {\r\n        return fetch(`/api/expenses/pivot/${yearMonthObj.year}/${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<tableType>(res, 'json'))\r\n    },\r\n    dataList: function (token: string | null): Promise<allDataListsType> {\r\n        return fetch(`/api/datalists`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => checkStatus<allDataListsType>(res, 'json'))\r\n    },\r\n    login: function (data: { username: string, password: string }): Promise<{ token: string }> {\r\n        return fetch('/auth/login', {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res => checkStatus<{ token: string }>(res, 'json'))\r\n    },\r\n    checkAuth: function (token: string | null): Promise<{username: string, token: string}> {\r\n        return fetch(`/auth/checkAuth`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res =>checkStatus<{username: string, token: string}>(res, 'json'))\r\n    }\r\n}\r\n\r\nexport default API","import React, { useState, useEffect } from 'react';\r\nimport ReportTable from '../components/Table';\r\nimport API from '../utils/API'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { AuthContext } from '../App'\r\nimport type { tableDataEntry, dataListStateType, allDataListsType, formStateType, InputName } from '../interfaces/Interfaces'\r\nimport { Button, FormControl, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\n\r\nfunction Home() {\r\n    const { Auth, setAuth } = React.useContext(AuthContext)\r\n    const [formState, setFormState] = useState<formStateType>(\r\n        {\r\n            form: \"expenses\",\r\n            year: new Date(Date.now()).getUTCFullYear(),\r\n            month: new Date(Date.now()).getUTCMonth()\r\n        }\r\n    )\r\n\r\n    const [incomeTableState, setIncomeTableState] = useState<{ schema: { fields: [] }, data: tableDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Date: \"\",\r\n                Source: \"\",\r\n                Person: \"\",\r\n                id: NaN,\r\n                source_id: NaN,\r\n                earner_id: NaN\r\n            }]\r\n        }\r\n    )\r\n\r\n    const [expensesTableState, setExpensesTableState] = useState<{ schema: { fields: [] }, data: tableDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Date: \"\",\r\n                Source: \"\",\r\n                Vendor: \"\",\r\n                Broad_category: \"\",\r\n                Narrow_category: \"\",\r\n                Person: \"\",\r\n                Notes: \"\",\r\n                entry_id: NaN\r\n            }]\r\n        }\r\n\r\n    )\r\n    const [pivotTableState, setPivotTableState] = useState<{ schema: { fields: [] }, data: tableDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Broad_category: \"\",\r\n                Narrow_category: \"\"\r\n            }]\r\n        }\r\n    )\r\n\r\n    // State for datalists\r\n\r\n    const [dataListsState, setDataListsState] = useState<allDataListsType>({\r\n        source: [],\r\n        person_earner: [],\r\n        narrow_category: [],\r\n        broad_category: [],\r\n        vendor: []\r\n    })\r\n\r\n    function formatDates(entry: tableDataEntry): tableDataEntry {\r\n        if (!entry.Date) {\r\n            return entry\r\n        } else {\r\n            let date = new Date(entry.Date);\r\n            let year = date.getUTCFullYear();\r\n            let month = (1 + date.getUTCMonth()).toString();\r\n            month = month.length > 1 ? month : '0' + month;\r\n            let day = date.getUTCDate().toString();\r\n            day = day.length > 1 ? day : '0' + day;\r\n            let dateString = month + '/' + day + '/' + year;\r\n            entry.Date = dateString\r\n            return entry\r\n        }\r\n    }\r\n\r\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { name?: string; value: unknown }> | React.ChangeEvent<HTMLSelectElement>): void {\r\n        let name = event.target.name as keyof typeof formState\r\n        setFormState({ ...formState, [name]: event.target.value })\r\n    }\r\n\r\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\r\n        try {\r\n            event.preventDefault()\r\n            let route = formState.form\r\n            let response = await API[route](Auth.token, formState)\r\n            // Formatting the dates the hard way because javascript doesn't support strftime...\r\n            if (route !== 'pivot') {\r\n                response.data = response.data.map(formatDates)\r\n            }\r\n            switch (route) {\r\n                case \"expenses\":\r\n                    setExpensesTableState(response)\r\n                    break;\r\n                case \"income\":\r\n                    setIncomeTableState(response)\r\n                    break;\r\n                case \"pivot\":\r\n                    setPivotTableState(response)\r\n                    break;\r\n            }\r\n        } catch (err) {\r\n            if (err.message === \"Unauthorized\") {\r\n                setAuth({ type: 'LOGOUT' })\r\n            }\r\n        }\r\n    }\r\n\r\n    function assignId(\r\n        name: InputName,\r\n        value: string) {\r\n\r\n        let state;\r\n        let id;\r\n\r\n        switch (name) {\r\n            case \"Person\":\r\n                state = dataListsState.person_earner;\r\n                id = 'person_id';\r\n                break;\r\n            case \"Source\":\r\n                state = dataListsState.source;\r\n                id = 'source_id';\r\n                break;\r\n            case \"Broad_category\":\r\n                state = dataListsState.broad_category;\r\n                id = 'broad_category_id';\r\n                break;\r\n            case \"Narrow_category\":\r\n                state = dataListsState.narrow_category;\r\n                id = 'narrow_category_id';\r\n                break;\r\n            case \"Vendor\":\r\n                state = dataListsState.vendor;\r\n                id = 'vendor_id';\r\n                break;\r\n        }\r\n        let dataListItem = state.filter((i: dataListStateType) => i.name === value)[0]\r\n        if (dataListItem) {\r\n            return { id: id, dataListItem: dataListItem }\r\n        } else {\r\n            return { id: null, dataListItem: null }\r\n        }\r\n    }\r\n\r\n    async function handleExpensesChange(event: React.ChangeEvent<HTMLInputElement>, index: number): Promise<void> {\r\n        try {\r\n            let { name, value } = event.target;\r\n            let newExpensesTableStateData: tableDataEntry[] = [...expensesTableState.data]\r\n            let updatedRow: tableDataEntry = { ...newExpensesTableStateData[index], [name]: value }\r\n            if (name === \"Person\" || name === \"Broad_category\" || name === \"Narrow_category\" || name === \"Vendor\") {\r\n                let { id, dataListItem } = assignId(name as InputName, value)\r\n                if (id && dataListItem) {\r\n                    updatedRow = { ...updatedRow, [id]: dataListItem.id }\r\n                }\r\n            }\r\n            newExpensesTableStateData[index] = updatedRow\r\n            setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\r\n\r\n        } catch (err) {\r\n            console.error(err)\r\n            if (err.message === \"Unauthorized\") {\r\n                setAuth({ type: 'LOGOUT' })\r\n            }\r\n        }\r\n    }\r\n    async function updateExpensesRow(index: number): Promise<void> {\r\n        try {\r\n            let res = await API.updateExpenses(Auth.token, expensesTableState.data[index])\r\n            console.log(res)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    async function updateIncomeRow(index: number): Promise<void> {\r\n        try {\r\n            let res = await API.updateIncome(Auth.token, incomeTableState.data[index])\r\n            console.log(res)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async function handleIncomeChange(event: React.ChangeEvent<HTMLInputElement>, index: number): Promise<void> {\r\n        try {\r\n            let { name, value } = event.target;\r\n            let newIncomeTableStateData: tableDataEntry[] = [...incomeTableState.data]\r\n            let updatedRow: tableDataEntry = { ...newIncomeTableStateData[index], [name]: value }\r\n            if (name === \"Person\" || name === \"Source\") {\r\n                let { id, dataListItem } = assignId(name as InputName, value)\r\n                if (id && dataListItem) {\r\n                    updatedRow = { ...updatedRow, [id]: dataListItem.id }\r\n                }\r\n            }\r\n            newIncomeTableStateData[index] = updatedRow\r\n            setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\r\n        } catch (err) {\r\n            console.error(err)\r\n            if (err.message === 'Unauthorized') {\r\n                setAuth({ type: 'LOGOUT' })\r\n            }\r\n        }\r\n    }\r\n\r\n    async function deleteEntry(id: number | undefined) {\r\n        try {\r\n            if (formState.form === \"expenses\") {\r\n                await API.deleteExpenses(Auth.token, id);\r\n                let newExpensesTableStateData = expensesTableState.data.filter(entry => entry.entry_id !== id)\r\n                setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\r\n            } else if (formState.form === \"income\") {\r\n                await API.deleteIncome(Auth.token, id);\r\n                let newIncomeTableStateData = incomeTableState.data.filter(entry => entry.id !== id)\r\n                setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\r\n            }\r\n        } catch (err) {\r\n            console.error(err)\r\n            if (err === 'Unauthorized') {\r\n                setAuth({ type: 'LOGOUT' })\r\n            }\r\n        }\r\n    }\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            formControl: {\r\n                margin: theme.spacing(1),\r\n                minWidth: 120,\r\n            },\r\n            selectEmpty: {\r\n                marginTop: theme.spacing(2),\r\n            },\r\n            root: {\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                flexWrap: 'wrap',\r\n                '& > *': {\r\n                    margin: theme.spacing(1),\r\n                    width: '15ch',\r\n                }\r\n            }\r\n        })\r\n    );\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    useEffect(() => {\r\n        async function getDataLists(): Promise<void> {\r\n            let datalists = await API.dataList(Auth.token)\r\n            setDataListsState(datalists)\r\n        }\r\n        getDataLists()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"Home\">\r\n            <header className=\"header\">\r\n                <Button variant=\"contained\" color=\"primary\" className=\"logout\" onClick={() => setAuth({ type: 'LOGOUT' })}>Logout</Button>\r\n                <h1 style={{textAlign: 'center'}}>Finances!</h1>\r\n                {Auth.token ?\r\n                    <img src=\"/wallchart\" alt=\"Wall Chart\" />\r\n                    : null\r\n                }\r\n\r\n                <form onSubmit={handleFormSubmit} className={classes.root}>\r\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                        <InputLabel htmlFor=\"form\">Report</InputLabel>\r\n                        <Select\r\n                            name=\"form\"\r\n                            label=\"Report\"\r\n                            labelId=\"form\"\r\n                            value={formState.form}\r\n                            onChange={handleFormChange}>\r\n                            <MenuItem value=\"income\">Income</MenuItem>\r\n                            <MenuItem value=\"expenses\">Expenses</MenuItem>\r\n                            <MenuItem value=\"pivot\">Pivot Table</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <TextField\r\n                        onChange={handleFormChange}\r\n                        value={formState.year}\r\n                        label=\"Year\"\r\n                        name=\"year\"\r\n                        type=\"number\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n\r\n                        <InputLabel htmlFor=\"month2\">Month</InputLabel>\r\n                        <Select\r\n                            onChange={handleFormChange}\r\n                            value={formState.month}\r\n                            name=\"month\"\r\n                            labelId=\"month2\"\r\n                            label=\"Month\"\r\n                        >\r\n                            <MenuItem value={1}>January</MenuItem>\r\n                            <MenuItem value={2}>February</MenuItem>\r\n                            <MenuItem value={3}>March</MenuItem>\r\n                            <MenuItem value={4}>April</MenuItem>\r\n                            <MenuItem value={5}>May</MenuItem>\r\n                            <MenuItem value={6}>June</MenuItem>\r\n                            <MenuItem value={7}>July</MenuItem>\r\n                            <MenuItem value={8}>August</MenuItem>\r\n                            <MenuItem value={9}>September</MenuItem>\r\n                            <MenuItem value={10}>October</MenuItem>\r\n                            <MenuItem value={11}>November</MenuItem>\r\n                            <MenuItem value={12}>December</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <Button \r\n                    type=\"submit\" \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    >\r\n                        Submit\r\n                        </Button>\r\n                </form>\r\n            </header>\r\n            <div className=\"body\">\r\n                {formState.form === \"income\" && incomeTableState.data[0]?.id ? (\r\n                    <ReportTable\r\n                        state={incomeTableState}\r\n                        dataLists={dataListsState}\r\n                        handleChange={handleIncomeChange}\r\n                        handleUpdate={updateIncomeRow}\r\n                        deleteEntry={deleteEntry}\r\n                        form={formState.form}\r\n                    />\r\n                ) : null}\r\n                {formState.form === \"expenses\" && expensesTableState.data[0]?.entry_id ? (\r\n                    <ReportTable\r\n                        state={expensesTableState}\r\n                        dataLists={dataListsState}\r\n                        handleChange={handleExpensesChange}\r\n                        handleUpdate={updateExpensesRow}\r\n                        deleteEntry={deleteEntry}\r\n                        form={formState.form}\r\n                    />\r\n                ) : null}\r\n                {formState.form === \"pivot\" && pivotTableState ? (\r\n                    <ReportTable\r\n                        state={pivotTableState}\r\n                        deleteEntry={() => null}\r\n                        handleUpdate={() => null}\r\n                        handleChange={() => null}\r\n                        form={formState.form}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport API from '../utils/API'\r\nimport { AuthContext } from '../App'\r\nimport { Button, FormControl, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\ncreateStyles({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '15ch',\r\n        }\r\n    }\r\n})\r\n);\r\n\r\nexport default function Login() {\r\n    const { Auth, setAuth } = React.useContext(AuthContext)\r\n\r\n    const [loginFormState, setLoginFormState] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n    });\r\n\r\n    const [failure, setFailure] = useState(false)\r\n\r\n    const inputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        setLoginFormState({\r\n            ...loginFormState,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const formSubmit = async (event: React.SyntheticEvent) => {\r\n        event.preventDefault();\r\n        try {\r\n            API.login(loginFormState).then(newToken => {\r\n                console.log(\"Login Token: \" + newToken.token)\r\n                setAuth({ type: 'LOGIN', payload: { user: loginFormState.username, token: newToken.token } })\r\n            })\r\n        } catch (err) {\r\n            console.log(err)\r\n            setFailure(true)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n\r\n    if (Auth.loggedIn) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n            <div className=\"Login\" style={{textAlign: 'center'}}>\r\n                    <h4>Login</h4>\r\n                    <div className=\"Response\">\r\n                        {failure ? <p>Incorrect username or password</p> : null}\r\n                    </div>\r\n                <form className={classes.root} onSubmit={formSubmit}>\r\n                    <TextField\r\n                        onChange={inputChange}\r\n                        value={loginFormState.username}\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        label=\"username\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <TextField\r\n                        onChange={inputChange}\r\n                        value={loginFormState.password}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        label=\"password\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <Button variant=\"contained\" color=\"primary\" name=\"login\" type=\"submit\">Login</Button>\r\n                </form>\r\n            </div>\r\n        </>\r\n    );\r\n}","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router, Route, Redirect, RouteComponentProps } from 'react-router-dom'\nimport Home from './pages/Home'\nimport Login from './pages/Login'\nimport API from './utils/API'\nimport './App.css';\n\n// import Auth from './utils/Auth'\n\ninterface Auth {\n  loggedIn: boolean,\n  user: string,\n  token: string\n}\n\ninterface AuthState {\n  Auth: Auth,\n  setAuth: React.Dispatch<{ type: string; payload?: { user: string; token: string; } | undefined; }>\n}\n\nconst ProtectedRoute = ({ component: Component, loggedIn, ...rest }: {\n  path: string,\n  loggedIn: boolean,\n  setLoggedIn: Function,\n  component: React.FunctionComponent<RouteComponentProps>,\n}): JSX.Element => (\n    <Route {...rest} render={props => (\n      loggedIn\n        ? <Component {...props} />\n        : <Redirect to='/login' />\n    )\n    } />\n\n  )\n\n  export const AuthContext = React.createContext<AuthState>({\n    Auth: {\n      loggedIn: false,\n      user: \"\",\n      token: \"\"\n    },\n    setAuth: (): void => {}\n  })\n  \n  const reducer = (state: Auth, action: {type: string, payload?: {user: string, token: string}}): Auth => {\n    if (action.type === 'LOGIN' && action.payload) {\n      localStorage.setItem(\"user\", action.payload.user);\n      localStorage.setItem(\"token\", action.payload.token);\n      return {\n        ...state,\n        loggedIn: true,\n        user: action.payload.user,\n        token: action.payload.token\n      };\n    } else if (action.type === 'LOGOUT') {\n      localStorage.clear();\n      return {\n        ...state,\n        loggedIn: false,\n        user: \"\",\n        token: \"\",\n      };\n    } else {\n      return state;\n    }\n  \n};\n\n  export default function App() {\n  const [Auth, setAuth] = React.useReducer(reducer, {\n    loggedIn: false,\n    user: \"\",\n    token: \"\"\n  })\n    \n  useEffect(() => {\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      API.checkAuth(token)\n      .then(res => setAuth({type: 'LOGIN', payload: {user: res.username, token: token}}))\n      .catch(err => {\n        // setAuth({type: 'LOGOUT'})\n      })\n    }\n  }, [])\n\n  return (\n    <AuthContext.Provider\n    value={{Auth, setAuth}}\n    >\n      <Router>\n        <ProtectedRoute path=\"/\"\n          loggedIn={Auth.loggedIn}\n          setLoggedIn={setAuth}\n          component={Home}\n        />\n        <Route exact path=\"/login\">\n          <Login />\n        </Route>\n      </Router>\n    </AuthContext.Provider>\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}