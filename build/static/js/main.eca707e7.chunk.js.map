{"version":3,"sources":["components/InputRow.tsx","components/Table.tsx","utils/API.tsx","pages/Home.tsx","pages/Login.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputRow","props","useState","entry","state","setState","makeDataList","propsState","id","map","value","name","handleInputRowChange","event","target","fields","filter","column","includes","onBlur","e","handleChange","i","console","log","onChange","Person","undefined","className","list","sourcesState","personsState","narrowState","broadState","Table","schema","replace","data","setPersonsState","setSourcesState","setBroadState","setNarrowState","API","expenses","token","yearMonthObj","fetch","year","month","headers","income","pivot","wallchart","sources","then","res","json","persons","narrow","broad","login","method","body","JSON","stringify","checkAuth","Home","setToken","form","formState","setFormState","Amount","Date","Source","NaN","source_id","earner_id","incomeTableState","setIncomeTableState","Vendor","Broad_category","Narrow_category","Notes","entry_id","expensesTableState","setExpensesTableState","pivotTableState","setPivotTableState","formatDates","date","getFullYear","getMonth","toString","length","day","getDate","dateString","handleFormChange","a","preventDefault","route","response","error","assignId","dataListItem","useEffect","newToken","localStorage","getItem","getDataLists","onClick","removeItem","window","location","reload","src","alt","onSubmit","htmlFor","type","placeholder","index","newIncomeTableStateData","updatedRow","newExpensesTableStateData","Login","username","password","loginFormState","setLoginFormState","failure","setFailure","inputChange","isLoggedIn","to","setItem","setIsLoggedIn","catch","err","ProtectedRoute","Component","component","rest","render","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eca707e7.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\ninterface tableDataEntry {\r\n    Amount: string,\r\n    Date?: string,\r\n    Source?: string,\r\n    Person?: string,\r\n    id?: number,\r\n    source_id?: number,\r\n    earner_id?: number,\r\n    Vendor?: string,\r\n    Broad_category?: string,\r\n    Narrow_category?: string,\r\n    Notes?: string,\r\n    entry_id?: number\r\n}\r\n\r\ninterface dataListStateType {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nexport default function InputRow(props:\r\n    {\r\n        entry: tableDataEntry,\r\n        i: number,\r\n        fields: { name: string }[],\r\n\r\n        sourcesState?: dataListStateType[],\r\n        personsState?: dataListStateType[],\r\n        broadState?: dataListStateType[],\r\n        narrowState?: dataListStateType[],\r\n        handleChange?: Function,\r\n        setSourcesState?: Function,\r\n        setPersonsState?: Function,\r\n        setBroadState?: Function,\r\n        setNarrowState?: Function\r\n    }) {\r\n\r\n    const [state, setState] = useState(props.entry)\r\n\r\n    function makeDataList(propsState: dataListStateType[], id: string) {\r\n        return (\r\n            <datalist id={id}>\r\n                {propsState.map((entry: dataListStateType) => {\r\n                    return (\r\n                        <option\r\n                            value={entry.name}\r\n                            key={entry.id}\r\n                        />\r\n                    )\r\n                })}\r\n            </datalist>\r\n        )\r\n    }\r\n\r\n    function handleInputRowChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        let {name, value} = event.target;\r\n        setState({...state, [name]: value})\r\n    }\r\n\r\n    function nothing(): void {\r\n        console.log(\"nothing\")\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                {props.fields\r\n                    .filter(column => !column.name.includes(\"id\"))\r\n                    .map(column => {\r\n                        return (\r\n                            <td key={props.i + column.name}>\r\n                                {column.name === 'Amount' ? <span>$</span> : null}\r\n                                <input\r\n                                    name={column.name}\r\n                                    onBlur={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                        props.handleChange ? props.handleChange(e, props.i) : nothing()\r\n                                    }}\r\n                                    onChange={state.Person ? handleInputRowChange : undefined}\r\n                                    className=\"tableInput\"\r\n                                    value={state[column.name as keyof tableDataEntry] || \"\"}\r\n                                    list={column.name}\r\n                                />\r\n                                {column.name === 'Source' && props.sourcesState ? (\r\n                                    makeDataList(props.sourcesState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Person' && props.personsState ? (\r\n                                    makeDataList(props.personsState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Narrow_category' && props.narrowState ? (\r\n                                    makeDataList(props.narrowState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Broad_category' && props.broadState ? (\r\n                                    makeDataList(props.broadState, column.name)\r\n                                ) : null}\r\n                            </td>\r\n                        )\r\n                    })}\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}","import React from 'react'\r\nimport InputRow from './InputRow'\r\n\r\ninterface tableDataEntry {\r\n    Amount: string,\r\n    Date?: string,\r\n    Source?: string,\r\n    Person?: string,\r\n    id?: number,\r\n    source_id?: number,\r\n    earner_id?: number,\r\n    Vendor?: string,\r\n    Broad_category?: string,\r\n    Narrow_category?: string,\r\n    Notes?: string,\r\n    entry_id?: number\r\n}\r\n\r\ninterface dataListStateType {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nexport default function Table(props:\r\n    {\r\n        state:\r\n        {\r\n            schema:\r\n            {\r\n                fields: { name: string }[]\r\n            },\r\n            data: tableDataEntry[]\r\n\r\n        },\r\n        sourcesState?: dataListStateType[],\r\n        personsState?: dataListStateType[],\r\n        broadState?: dataListStateType[],\r\n        narrowState?: dataListStateType[],\r\n        handleChange?: Function,\r\n        setSourcesState?: Function,\r\n        setPersonsState?: Function,\r\n        setBroadState?: Function,\r\n        setNarrowState?: Function\r\n    }) {\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    {props.state.schema.fields\r\n                        .filter(column => !column.name.includes(\"id\"))\r\n                        .map(column => {\r\n                            return (\r\n                                <th key={column.name}>\r\n                                    {column.name.replace(\"_\", \" \")}\r\n                                </th>\r\n                            )\r\n                        })}\r\n                </tr>\r\n            </thead>\r\n            {(props.state.data).map((entry: tableDataEntry, i: number) => {\r\n                return (<InputRow\r\n                    entry={entry}\r\n                    i={i}\r\n                    key={i}\r\n                    fields={props.state.schema.fields}\r\n                    handleChange={props.handleChange}\r\n                    sourcesState={props.sourcesState}\r\n                    personsState={props.personsState}\r\n                    broadState={props.broadState}\r\n                    narrowState={props.narrowState}\r\n\r\n                    setPersonsState={props.setPersonsState}\r\n                    setSourcesState={props.setSourcesState}\r\n                    setBroadState={props.setBroadState}\r\n                    setNarrowState={props.setNarrowState}\r\n                />)\r\n            })}\r\n        </table>\r\n    )\r\n}","\r\ninterface sourcesStateType {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nconst API = {\r\n    expenses: function (token: string | null, yearMonthObj: { form: string, year: string, month: string }): Promise<Response> {\r\n        return fetch(`/api/expenses?year=${yearMonthObj.year}&month=${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        })\r\n    },\r\n    income: function (token: string | null, yearMonthObj: { form: string, year: string, month: string }): Promise<Response> {\r\n        return fetch(`/api/income?year=${yearMonthObj.year}&month=${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        })\r\n    },\r\n    pivot: function (token: string | null, yearMonthObj: { form: string, year: string, month: string }): Promise<Response> {\r\n        return fetch(`/api/pivot?year=${yearMonthObj.year}&month=${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        })\r\n    },\r\n    wallchart: function (token: string | null,): Promise<Response> {\r\n        return fetch('/api/wallchart', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        })\r\n    },\r\n    sources: function (token: string | null,): Promise<{ data: sourcesStateType[] }> {\r\n        return fetch('/api/sources', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => res.json())\r\n    },\r\n    persons: function (token: string | null,): Promise<{ data: sourcesStateType[] }> {\r\n        return fetch('/api/persons', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => res.json())\r\n    },\r\n    narrow: function (token: string | null,): Promise<{ data: sourcesStateType[] }> {\r\n        return fetch('/api/narrows', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => res.json())\r\n    },\r\n    broad: function (token: string | null,): Promise<{ data: sourcesStateType[] }> {\r\n        return fetch('/api/broads', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => res.json())\r\n    },\r\n    login: function (data: { username: string, password: string }): Promise<{ token: string }> {\r\n        return fetch('/api/login', {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res => res.json())\r\n    },\r\n    checkAuth: function (token: string | null): Promise<Response> {\r\n        return fetch(`/api/checkAuth`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => res.json())\r\n    }\r\n}\r\n\r\nexport default API","import React, { useState, useEffect } from 'react';\r\nimport Table from '../components/Table';\r\nimport API from '../utils/API'\r\n\r\nfunction Home() {\r\n    interface formStateType {\r\n        form: \"expenses\" | \"income\" | \"pivot\",\r\n        year: string,\r\n        month: string\r\n    }\r\n\r\n    interface expensesDataEntry {\r\n        Amount: string,\r\n        Date: string,\r\n        Source: string,\r\n        Vendor: string,\r\n        Broad_category: string,\r\n        Narrow_category: string,\r\n        Person: string,\r\n        Notes: string,\r\n        entry_id: number\r\n    }\r\n\r\n    interface incomeDataEntry {\r\n        Amount: string,\r\n        Date: string,\r\n        Source: string,\r\n        Person: string,\r\n        id: number,\r\n        source_id: number,\r\n        earner_id: number\r\n    }\r\n\r\n    interface pivotDataEntry {\r\n        Broad_category: string,\r\n        Narrow_category: string,\r\n        Amount: string\r\n    }\r\n\r\n\r\n    interface dataListStateType {\r\n        id: number,\r\n        name: string\r\n    }\r\n\r\n    type InputName = \"Person\" | \"Source\" | \"Broad_category\" | \"Narrow_category\"\r\n\r\n    const [token, setToken] = useState(\"\")\r\n\r\n    const [formState, setFormState] = useState<formStateType>(\r\n        {\r\n            form: \"income\",\r\n            year: \"\",\r\n            month: \"\"\r\n        }\r\n    )\r\n\r\n    const [incomeTableState, setIncomeTableState] = useState<{ schema: { fields: [] }, data: incomeDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Date: \"\",\r\n                Source: \"\",\r\n                Person: \"\",\r\n                id: NaN,\r\n                source_id: NaN,\r\n                earner_id: NaN\r\n            }]\r\n        }\r\n    )\r\n\r\n    const [expensesTableState, setExpensesTableState] = useState<{ schema: { fields: [] }, data: expensesDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Date: \"\",\r\n                Source: \"\",\r\n                Vendor: \"\",\r\n                Broad_category: \"\",\r\n                Narrow_category: \"\",\r\n                Person: \"\",\r\n                Notes: \"\",\r\n                entry_id: NaN\r\n            }]\r\n        }\r\n\r\n    )\r\n    const [pivotTableState, setPivotTableState] = useState<{ schema: { fields: [] }, data: pivotDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Broad_category: \"\",\r\n                Narrow_category: \"\"\r\n            }]\r\n        }\r\n    )\r\n\r\n    // State for datalists\r\n    const [sourcesState, setSourcesState] = useState<dataListStateType[]>([])\r\n    const [personsState, setPersonsState] = useState<dataListStateType[]>([])\r\n    const [broadState, setBroadState] = useState<dataListStateType[]>([])\r\n    const [narrowState, setNarrowState] = useState<dataListStateType[]>([])\r\n\r\n    function formatDates(entry:\r\n        {\r\n            Date: string\r\n        }): {\r\n            Date: string\r\n        } {\r\n        let date = new Date(entry.Date);\r\n        let year = date.getFullYear();\r\n        let month = (1 + date.getMonth()).toString();\r\n        month = month.length > 1 ? month : '0' + month;\r\n        let day = date.getDate().toString();\r\n        day = day.length > 1 ? day : '0' + day;\r\n        let dateString = month + '/' + day + '/' + year;\r\n        entry.Date = dateString\r\n        return entry\r\n    }\r\n\r\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>): void {\r\n        let { name, value } = event.target;\r\n        setFormState({ ...formState, [name]: value })\r\n    }\r\n\r\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\r\n        try {\r\n            event.preventDefault()\r\n            let route = formState.form\r\n            let response = await (await API[route](token, formState)).json()\r\n            // Formatting the dates the hard way because javascript doesn't support strftime...\r\n            response.data = response.data.map(formatDates)\r\n            console.log(response)\r\n            switch (route) {\r\n                case \"expenses\":\r\n                    setExpensesTableState(response)\r\n                    break;\r\n                case \"income\":\r\n                    setIncomeTableState(response)\r\n                    break;\r\n                case \"pivot\":\r\n                    setPivotTableState(response)\r\n                    break;\r\n            }\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    function assignId(\r\n        name: InputName,\r\n        value: string) {\r\n\r\n        let state;\r\n        let id;\r\n\r\n        switch (name) {\r\n            case \"Person\":\r\n                state = personsState;\r\n                id = 'earner_id'\r\n                break;\r\n            case \"Source\":\r\n                state = sourcesState;\r\n                id = 'source_id'\r\n                break;\r\n            case \"Broad_category\":\r\n                state = broadState;\r\n                id = 'broad_category_id'\r\n                break;\r\n            case \"Narrow_category\":\r\n                state = narrowState;\r\n                id = 'narrow_category_id'\r\n                break;\r\n        }\r\n        let dataListItem = state.filter((i: dataListStateType) => i.name === value)[0]\r\n        if (dataListItem) {\r\n            return { id: id, dataListItem: dataListItem }\r\n        } else {\r\n            return { id: null, dataListItem: null }\r\n        }\r\n    }\r\n\r\n    function handleExpensesChange(event: React.ChangeEvent<HTMLInputElement>, index: number): void {\r\n        let { name, value } = event.target;\r\n        let newExpensesTableStateData: expensesDataEntry[] = [...expensesTableState.data]\r\n        let updatedRow: expensesDataEntry = { ...newExpensesTableStateData[index], [name]: value }\r\n        if (name === \"Person\" || name === \"Broad_category\" || name === \"Narrow_category\") {\r\n            let { id, dataListItem } = assignId(name as InputName, value)\r\n            if (id && dataListItem) {\r\n                updatedRow = { ...updatedRow, [id]: dataListItem.id }\r\n            }\r\n        }\r\n        newExpensesTableStateData[index] = updatedRow\r\n        setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\r\n    }\r\n\r\n    function handleIncomeChange(event: React.ChangeEvent<HTMLInputElement>, index: number): void {\r\n        let { name, value } = event.target;\r\n        let newIncomeTableStateData: incomeDataEntry[] = [...incomeTableState.data]\r\n        let updatedRow: incomeDataEntry = { ...newIncomeTableStateData[index], [name]: value }\r\n        if (name === \"Person\" || name === \"Source\") {\r\n            let { id, dataListItem } = assignId(name as InputName, value)\r\n            if (id && dataListItem) {\r\n                updatedRow = { ...updatedRow, [id]: dataListItem.id }\r\n            }\r\n        }\r\n        newIncomeTableStateData[index] = updatedRow\r\n        setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\r\n    }\r\n\r\n    function logout() {\r\n        localStorage.removeItem(\"token\")\r\n        window.location.reload()\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        async function getDataLists(): Promise<void> {\r\n            let newToken = localStorage.getItem(\"token\")\r\n            if (newToken) {\r\n                setToken(newToken)\r\n            }\r\n            if (sourcesState.length === 0) {\r\n                let { data } = await API.sources(newToken)\r\n                setSourcesState(data)\r\n            }\r\n            if (personsState.length === 0) {\r\n                let res = await API.persons(newToken)\r\n                setPersonsState(res.data)\r\n            }\r\n            if (narrowState.length === 0) {\r\n                let res = await API.narrow(newToken)\r\n                setNarrowState(res.data)\r\n            }\r\n            if (broadState.length === 0) {\r\n                let res = await API.broad(newToken)\r\n                setBroadState(res.data)\r\n            }\r\n        }\r\n        getDataLists()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"header\">\r\n                <button className=\"logout\" onClick={logout}>Logout</button>\r\n                <h1>Finances!</h1>\r\n                {token ?\r\n                    <img src=\"/api/wallchart\" alt=\"Wall Chart\" />\r\n                    : null\r\n                }\r\n                <form onSubmit={handleFormSubmit} className=\"form-inline\">\r\n                    <select name=\"form\" value={formState.form} onChange={handleFormChange}>\r\n                        <option value=\"income\">Income</option>\r\n                        <option value=\"expenses\">Expenses</option>\r\n                        <option value=\"pivot\">Pivot Table</option>\r\n                    </select>\r\n                    <label htmlFor=\"year2\">Year</label>\r\n                    <input\r\n                        onChange={handleFormChange}\r\n                        value={formState.year}\r\n                        type=\"text\"\r\n                        id=\"year2\"\r\n                        className=\"form-control\"\r\n                        name=\"year\"\r\n                        placeholder=\"YYYY\"\r\n                    />\r\n                    <label htmlFor=\"month2\">Month</label>\r\n                    <input\r\n                        onChange={handleFormChange}\r\n                        value={formState.month}\r\n                        type=\"text\"\r\n                        id=\"month2\"\r\n                        className=\"form-control\"\r\n                        name=\"month\"\r\n                        placeholder=\"MM\" />\r\n                    <button className=\"btn btn-success\">Submit</button>\r\n                </form>\r\n            </div>\r\n            {formState.form === \"income\" && incomeTableState.data[0]?.id ? (\r\n                <Table\r\n                    state={incomeTableState}\r\n                    sourcesState={sourcesState}\r\n                    personsState={personsState}\r\n                    handleChange={handleIncomeChange}\r\n                    setSourcesState={setSourcesState}\r\n                    setPersonsState={setPersonsState}\r\n                />\r\n            ) : null}\r\n            {formState.form === \"expenses\" && expensesTableState.data[0]?.entry_id ? (\r\n                <Table\r\n                    state={expensesTableState}\r\n                    personsState={personsState}\r\n                    broadState={broadState}\r\n                    narrowState={narrowState}\r\n                    handleChange={handleExpensesChange}\r\n                    setPersonsState={setPersonsState}\r\n                    setBroadState={setBroadState}\r\n                    setNarrowState={setNarrowState}\r\n                />\r\n            ) : null}\r\n            {formState.form === \"pivot\" && pivotTableState ? (\r\n                <Table\r\n                    state={pivotTableState}\r\n                />\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useState } from 'react'\r\nimport {Redirect } from 'react-router-dom'\r\nimport API from '../utils/API'\r\n\r\nexport default function Login(props: {isLoggedIn: boolean, setIsLoggedIn: Function}) {\r\n    const [loginFormState, setLoginFormState] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n    });\r\n\r\n    const [failure, setFailure] = useState(false)\r\n\r\n    const inputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        setLoginFormState({\r\n            ...loginFormState,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const formSubmit = (event: React.SyntheticEvent) => {\r\n        event.preventDefault();\r\n        console.log(loginFormState)\r\n        API.login(loginFormState).then(newToken => {\r\n            localStorage.setItem(\"token\", newToken.token)\r\n            props.setIsLoggedIn(true)\r\n            \r\n        }).catch(err => setFailure(true))\r\n    }\r\n\r\n    if (props.isLoggedIn) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"Login\">\r\n                <form className=\"LoginForm\" onSubmit={formSubmit}>\r\n                    <h4>Login</h4>\r\n                    <div className=\"Response\">\r\n                        {failure ? <p>Incorrect username or password</p> : null}\r\n                    </div>\r\n                    <input\r\n                        onChange={inputChange}\r\n                        value={loginFormState.username}\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        placeholder=\"username\"\r\n                    />\r\n                    <input\r\n                        onChange={inputChange}\r\n                        value={loginFormState.password}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\"password\"\r\n                    />\r\n                    <button className=\"Btn\" name=\"login\" type=\"submit\">Login</button>\r\n                </form>\r\n            </div>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react'\nimport { BrowserRouter as Router, Route, Redirect, RouteComponentProps } from 'react-router-dom'\nimport Home from './pages/Home'\nimport Login from './pages/Login'\nimport API from './utils/API'\nimport './App.css';\n\n// import Auth from './utils/Auth'\n\n\nconst ProtectedRoute = ({ component: Component, isLoggedIn, ...rest }: {\n  path: string,\n  isLoggedIn: boolean,\n  setIsLoggedIn: Function,\n  component: React.FunctionComponent<RouteComponentProps>,\n}): JSX.Element => (\n    <Route {...rest} render={props => (\n      isLoggedIn\n          ? <Component {...props} />\n          : <Redirect to='/login' />\n      )\n    } />\n\n  )\n\nexport default function App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\")\n    API.checkAuth(token)\n      .then(res=>setIsLoggedIn(true))\n      .catch(err=>{\n        setIsLoggedIn(false)\n        localStorage.removeItem(\"token\")\n      })\n  }, [])\n\n  return (\n    <Router>\n      <ProtectedRoute path=\"/\"\n        isLoggedIn={isLoggedIn}\n        setIsLoggedIn={setIsLoggedIn}\n        component={Home}\n      />\n      <Route exact path=\"/login\">\n        <Login\n          isLoggedIn={isLoggedIn}\n          setIsLoggedIn={setIsLoggedIn} />\n      </Route>\n    </Router>\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}