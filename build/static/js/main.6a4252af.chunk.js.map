{"version":3,"sources":["components/InputRow.tsx","components/Table.tsx","utils/API.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputRow","props","useState","entry","state","setState","makeDataList","propsState","id","map","value","name","handleInputRowChange","event","target","fields","filter","column","includes","onBlur","e","handleChange","i","console","log","onChange","Person","undefined","className","list","sourcesState","personsState","narrowState","broadState","Table","schema","replace","data","setPersonsState","setSourcesState","setBroadState","setNarrowState","API","expenses","yearMonthObj","fetch","year","month","income","pivot","wallchart","sources","then","res","json","persons","narrow","broad","App","form","formState","setFormState","Amount","Date","Source","NaN","source_id","earner_id","incomeTableState","setIncomeTableState","Vendor","Broad_category","Narrow_category","Notes","entry_id","expensesTableState","setExpensesTableState","pivotTableState","setPivotTableState","formatDates","date","getFullYear","getMonth","toString","length","day","getDate","dateString","handleFormChange","a","preventDefault","route","response","error","assignId","dataListItem","useEffect","getDataLists","src","alt","onSubmit","htmlFor","type","placeholder","index","newIncomeTableStateData","updatedRow","newExpensesTableStateData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a4252af.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\ninterface tableDataEntry {\r\n    Amount: string,\r\n    Date?: string,\r\n    Source?: string,\r\n    Person?: string,\r\n    id?: number,\r\n    source_id?: number,\r\n    earner_id?: number,\r\n    Vendor?: string,\r\n    Broad_category?: string,\r\n    Narrow_category?: string,\r\n    Notes?: string,\r\n    entry_id?: number\r\n}\r\n\r\ninterface dataListStateType {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nexport default function InputRow(props:\r\n    {\r\n        entry: tableDataEntry,\r\n        i: number,\r\n        fields: { name: string }[],\r\n\r\n        sourcesState?: dataListStateType[],\r\n        personsState?: dataListStateType[],\r\n        broadState?: dataListStateType[],\r\n        narrowState?: dataListStateType[],\r\n        handleChange?: Function,\r\n        setSourcesState?: Function,\r\n        setPersonsState?: Function,\r\n        setBroadState?: Function,\r\n        setNarrowState?: Function\r\n    }) {\r\n\r\n    const [state, setState] = useState(props.entry)\r\n\r\n    function makeDataList(propsState: dataListStateType[], id: string) {\r\n        return (\r\n            <datalist id={id}>\r\n                {propsState.map((entry: dataListStateType) => {\r\n                    return (\r\n                        <option\r\n                            value={entry.name}\r\n                            key={entry.id}\r\n                        />\r\n                    )\r\n                })}\r\n            </datalist>\r\n        )\r\n    }\r\n\r\n    function handleInputRowChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        let {name, value} = event.target;\r\n        setState({...state, [name]: value})\r\n    }\r\n\r\n    function nothing(): void {\r\n        console.log(\"nothing\")\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                {props.fields\r\n                    .filter(column => !column.name.includes(\"id\"))\r\n                    .map(column => {\r\n                        return (\r\n                            <td key={props.i + column.name}>\r\n                                {column.name === 'Amount' ? <span>$</span> : null}\r\n                                <input\r\n                                    name={column.name}\r\n                                    onBlur={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                        props.handleChange ? props.handleChange(e, props.i) : nothing()\r\n                                    }}\r\n                                    onChange={state.Person ? handleInputRowChange : undefined}\r\n                                    className=\"tableInput\"\r\n                                    value={state[column.name as keyof tableDataEntry] || \"\"}\r\n                                    list={column.name}\r\n                                />\r\n                                {column.name === 'Source' && props.sourcesState ? (\r\n                                    makeDataList(props.sourcesState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Person' && props.personsState ? (\r\n                                    makeDataList(props.personsState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Narrow_category' && props.narrowState ? (\r\n                                    makeDataList(props.narrowState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Broad_category' && props.broadState ? (\r\n                                    makeDataList(props.broadState, column.name)\r\n                                ) : null}\r\n                            </td>\r\n                        )\r\n                    })}\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}","import React from 'react'\r\nimport InputRow from './InputRow'\r\n\r\ninterface tableDataEntry {\r\n    Amount: string,\r\n    Date?: string,\r\n    Source?: string,\r\n    Person?: string,\r\n    id?: number,\r\n    source_id?: number,\r\n    earner_id?: number,\r\n    Vendor?: string,\r\n    Broad_category?: string,\r\n    Narrow_category?: string,\r\n    Notes?: string,\r\n    entry_id?: number\r\n}\r\n\r\ninterface dataListStateType {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nexport default function Table(props:\r\n    {\r\n        state:\r\n        {\r\n            schema:\r\n            {\r\n                fields: { name: string }[]\r\n            },\r\n            data: tableDataEntry[]\r\n\r\n        },\r\n        sourcesState?: dataListStateType[],\r\n        personsState?: dataListStateType[],\r\n        broadState?: dataListStateType[],\r\n        narrowState?: dataListStateType[],\r\n        handleChange?: Function,\r\n        setSourcesState?: Function,\r\n        setPersonsState?: Function,\r\n        setBroadState?: Function,\r\n        setNarrowState?: Function\r\n    }) {\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    {props.state.schema.fields\r\n                        .filter(column => !column.name.includes(\"id\"))\r\n                        .map(column => {\r\n                            return (\r\n                                <th key={column.name}>\r\n                                    {column.name.replace(\"_\", \" \")}\r\n                                </th>\r\n                            )\r\n                        })}\r\n                </tr>\r\n            </thead>\r\n            {(props.state.data).map((entry: tableDataEntry, i: number) => {\r\n                return (<InputRow\r\n                    entry={entry}\r\n                    i={i}\r\n                    key={i}\r\n                    fields={props.state.schema.fields}\r\n                    handleChange={props.handleChange}\r\n                    sourcesState={props.sourcesState}\r\n                    personsState={props.personsState}\r\n                    broadState={props.broadState}\r\n                    narrowState={props.narrowState}\r\n\r\n                    setPersonsState={props.setPersonsState}\r\n                    setSourcesState={props.setSourcesState}\r\n                    setBroadState={props.setBroadState}\r\n                    setNarrowState={props.setNarrowState}\r\n                />)\r\n            })}\r\n        </table>\r\n    )\r\n}","\r\ninterface sourcesStateType {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nconst API = {\r\n    expenses: function (yearMonthObj: { form: string, year: string, month: string }): Promise<Response> {\r\n        return fetch(`/api/expenses?year=${yearMonthObj.year}&month=${yearMonthObj.month}`)\r\n    },\r\n    income: function (yearMonthObj: { form: string, year: string, month: string }): Promise<Response> {\r\n        return fetch(`/api/income?year=${yearMonthObj.year}&month=${yearMonthObj.month}`)\r\n    },\r\n    pivot: function (yearMonthObj: { form: string, year: string, month: string }): Promise<Response> {\r\n        return fetch(`/api/pivot?year=${yearMonthObj.year}&month=${yearMonthObj.month}`)\r\n    },\r\n    wallchart: function (): Promise<Response> {\r\n        return fetch('/api/wallchart')\r\n    },\r\n    sources: function (): Promise<{data: sourcesStateType[]}> {\r\n        return fetch('/api/sources').then(res=>res.json())\r\n    },\r\n    persons: function (): Promise<{data: sourcesStateType[]}> {\r\n        return fetch('/api/persons').then(res=>res.json())\r\n    },\r\n    narrow: function (): Promise<{data: sourcesStateType[]}> {\r\n        return fetch('/api/narrows').then(res=>res.json())\r\n    },\r\n    broad: function (): Promise<{data: sourcesStateType[]}> {\r\n        return fetch('/api/broads').then(res=>res.json())\r\n    }\r\n}\r\n\r\nexport default API","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Table from './components/Table';\nimport API from './utils/API'\n\nfunction App() {\n  interface formStateType {\n    form: \"expenses\" | \"income\" | \"pivot\",\n    year: string,\n    month: string\n  }\n\n  interface expensesDataEntry {\n    Amount: string,\n    Date: string,\n    Source: string,\n    Vendor: string,\n    Broad_category: string,\n    Narrow_category: string,\n    Person: string,\n    Notes: string,\n    entry_id: number\n  }\n\n  interface incomeDataEntry {\n    Amount: string,\n    Date: string,\n    Source: string,\n    Person: string,\n    id: number,\n    source_id: number,\n    earner_id: number\n  }\n\n  interface pivotDataEntry {\n    Broad_category: string,\n    Narrow_category: string,\n    Amount: string\n  }\n\n\n  interface dataListStateType {\n    id: number,\n    name: string\n  }\n\n  type InputName = \"Person\" | \"Source\" | \"Broad_category\" | \"Narrow_category\"\n\n  const [formState, setFormState] = useState<formStateType>(\n    {\n      form: \"income\",\n      year: \"\",\n      month: \"\"\n    }\n  )\n\n  const [incomeTableState, setIncomeTableState] = useState<{ schema: { fields: [] }, data: incomeDataEntry[] }>(\n    {\n      schema: { fields: [] },\n      data: [{\n        Amount: \"\",\n        Date: \"\",\n        Source: \"\",\n        Person: \"\",\n        id: NaN,\n        source_id: NaN,\n        earner_id: NaN\n      }]\n    }\n  )\n\n  const [expensesTableState, setExpensesTableState] = useState<{ schema: { fields: [] }, data: expensesDataEntry[] }>(\n    {\n      schema: { fields: [] },\n      data: [{\n        Amount: \"\",\n        Date: \"\",\n        Source: \"\",\n        Vendor: \"\",\n        Broad_category: \"\",\n        Narrow_category: \"\",\n        Person: \"\",\n        Notes: \"\",\n        entry_id: NaN\n      }]\n    }\n\n  )\n  const [pivotTableState, setPivotTableState] = useState<{ schema: { fields: [] }, data: pivotDataEntry[] }>(\n    {\n      schema: { fields: [] },\n      data: [{\n        Amount: \"\",\n        Broad_category: \"\",\n        Narrow_category: \"\"\n      }]\n    }\n  )\n\n  // State for datalists\n  const [sourcesState, setSourcesState] = useState<dataListStateType[]>([])\n  const [personsState, setPersonsState] = useState<dataListStateType[]>([])\n  const [broadState, setBroadState] = useState<dataListStateType[]>([])\n  const [narrowState, setNarrowState] = useState<dataListStateType[]>([])\n\n  function formatDates(entry:\n    {\n      Date: string\n    }): {\n      Date: string\n    } {\n    let date = new Date(entry.Date);\n    let year = date.getFullYear();\n    let month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month;\n    let day = date.getDate().toString();\n    day = day.length > 1 ? day : '0' + day;\n    let dateString = month + '/' + day + '/' + year;\n    entry.Date = dateString\n    return entry\n  }\n\n  function handleFormChange(event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>): void {\n    let { name, value } = event.target;\n    setFormState({ ...formState, [name]: value })\n  }\n\n  async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\n    try {\n      event.preventDefault()\n      let route = formState.form\n      let response = await (await API[route](formState)).json()\n      // Formatting the dates the hard way because javascript doesn't support strftime...\n      response.data = response.data.map(formatDates)\n      switch (route) {\n        case \"expenses\":\n          setExpensesTableState(response)\n          break;\n        case \"income\":\n          setIncomeTableState(response)\n          break;\n        case \"pivot\":\n          setPivotTableState(response)\n          break;\n      }\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  function assignId(\n    name: InputName,\n    value: string) {\n\n    let state;\n    let id;\n\n    switch (name) {\n      case \"Person\":\n        state = personsState;\n        id = 'earner_id'\n        break;\n      case \"Source\":\n        state = sourcesState;\n        id = 'source_id'\n        break;\n      case \"Broad_category\":\n        state = broadState;\n        id = 'broad_category_id'\n        break;\n      case \"Narrow_category\":\n        state = narrowState;\n        id = 'narrow_category_id'\n        break;\n    }\n    let dataListItem = state.filter((i: dataListStateType) => i.name === value)[0]\n    if (dataListItem) {\n      return { id: id, dataListItem: dataListItem }\n    } else {\n      return { id: null, dataListItem: null }\n    }\n  }\n\n  function handleExpensesChange(event: React.ChangeEvent<HTMLInputElement>, index: number): void {\n    let { name, value } = event.target;\n    let newExpensesTableStateData: expensesDataEntry[] = [...expensesTableState.data]\n    let updatedRow: expensesDataEntry = { ...newExpensesTableStateData[index], [name]: value }\n    if (name === \"Person\" || name === \"Broad_category\" || name === \"Narrow_category\") {\n      let { id, dataListItem } = assignId(name as InputName, value)\n      if (id && dataListItem) {\n        updatedRow = { ...updatedRow, [id]: dataListItem.id }\n      }\n    }\n    newExpensesTableStateData[index] = updatedRow\n    setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\n  }\n\n  function handleIncomeChange(event: React.ChangeEvent<HTMLInputElement>, index: number): void {\n    let { name, value } = event.target;\n    let newIncomeTableStateData: incomeDataEntry[] = [...incomeTableState.data]\n    let updatedRow: incomeDataEntry = { ...newIncomeTableStateData[index], [name]: value }\n    if (name === \"Person\" || name === \"Source\") {\n      let { id, dataListItem } = assignId(name as InputName, value)\n      if (id && dataListItem) {\n        updatedRow = { ...updatedRow, [id]: dataListItem.id }\n      }\n    }\n    newIncomeTableStateData[index] = updatedRow\n    setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\n  }\n\n\n  useEffect(() => {\n    async function getDataLists(): Promise<void> {\n      if (sourcesState.length === 0) {\n        let { data } = await API.sources()\n        setSourcesState(data)\n      }\n      if (personsState.length === 0) {\n        let res = await API.persons()\n        setPersonsState(res.data)\n      }\n      if (narrowState.length === 0) {\n        let res = await API.narrow()\n        setNarrowState(res.data)\n      }\n      if (broadState.length === 0) {\n        let res = await API.broad()\n        setBroadState(res.data)\n      }\n    }\n    getDataLists()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Finances!</h1>\n        <img src=\"/api/wallchart\" alt=\"Wall Chart\" />\n        <form onSubmit={handleFormSubmit} className=\"form-inline\">\n          <select name=\"form\" value={formState.form} onChange={handleFormChange}>\n            <option value=\"income\">Income</option>\n            <option value=\"expenses\">Expenses</option>\n            <option value=\"pivot\">Pivot Table</option>\n          </select>\n          <label htmlFor=\"year2\">Year</label>\n          <input\n            onChange={handleFormChange}\n            value={formState.year}\n            type=\"text\"\n            id=\"year2\"\n            className=\"form-control\"\n            name=\"year\"\n            placeholder=\"YYYY\"\n          />\n          <label htmlFor=\"month2\">Month</label>\n          <input\n            onChange={handleFormChange}\n            value={formState.month}\n            type=\"text\"\n            id=\"month2\"\n            className=\"form-control\"\n            name=\"month\"\n            placeholder=\"MM\" />\n          <button className=\"btn btn-success\">Submit</button>\n        </form>\n      </div>\n      {formState.form === \"income\" && incomeTableState.data[0].id ? (\n        <Table\n          state={incomeTableState}\n          sourcesState={sourcesState}\n          personsState={personsState}\n          handleChange={handleIncomeChange}\n          setSourcesState={setSourcesState}\n          setPersonsState={setPersonsState}\n        />\n      ) : null}\n      {formState.form === \"expenses\" && expensesTableState.data[0].entry_id ? (\n        <Table\n          state={expensesTableState}\n          personsState={personsState}\n          broadState={broadState}\n          narrowState={narrowState}\n          handleChange={handleExpensesChange}\n          setPersonsState={setPersonsState}\n          setBroadState={setBroadState}\n          setNarrowState={setNarrowState}\n        />\n      ) : null}\n      {formState.form === \"pivot\" && pivotTableState ? (\n        <Table\n          state={pivotTableState}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}