{"version":3,"sources":["components/InputRow.tsx","components/StaticRow.tsx","components/Table.tsx","utils/API.tsx","pages/Home.tsx","pages/Login.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputRow","props","useState","Amount","state","setState","makeDataList","propsState","id","map","entry","value","name","handleInputRowChange","event","target","useEffect","fields","filter","column","includes","onBlur","e","handleChange","i","onChange","className","list","sourcesState","personsState","narrowState","broadState","vendorsState","onClick","deleteEntry","entry_id","StaticRow","Table","schema","replace","data","form","setPersonsState","setSourcesState","setBroadState","setNarrowState","checkStatus","res","parseMethod","status","Error","json","text","API","expenses","token","yearMonthObj","fetch","year","month","headers","then","deleteExpenses","method","updateExpenses","body","JSON","stringify","income","updateIncome","deleteIncome","pivot","sources","persons","narrow","broad","vendors","login","checkAuth","Home","React","useContext","AuthContext","Auth","setAuth","formState","setFormState","Date","Source","Person","NaN","source_id","earner_id","incomeTableState","setIncomeTableState","Vendor","Broad_category","Narrow_category","Notes","expensesTableState","setExpensesTableState","pivotTableState","setPivotTableState","setVendorsState","formatDates","date","getUTCFullYear","getUTCMonth","toString","length","day","getUTCDate","dateString","handleFormChange","a","preventDefault","route","response","message","type","assignId","dataListItem","index","newExpensesTableStateData","updatedRow","console","log","error","newIncomeTableStateData","getDataLists","src","alt","onSubmit","htmlFor","placeholder","Login","username","password","loginFormState","setLoginFormState","failure","setFailure","inputChange","loggedIn","to","newToken","payload","user","catch","err","ProtectedRoute","Component","component","rest","render","createContext","reducer","action","localStorage","setItem","clear","App","useReducer","getItem","Provider","path","setLoggedIn","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11e048da.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {dataListStateType, tableDataEntry} from '../interfaces/Interfaces'\r\n\r\nexport default function InputRow(props:\r\n    {\r\n        entry: tableDataEntry,\r\n        i: number,\r\n        fields: { name: string }[],\r\n\r\n        sourcesState?: dataListStateType[],\r\n        personsState?: dataListStateType[],\r\n        broadState?: dataListStateType[],\r\n        narrowState?: dataListStateType[],\r\n        vendorsState?: dataListStateType[],\r\n        handleChange: Function,\r\n        setSourcesState?: Function,\r\n        setPersonsState?: Function,\r\n        setBroadState?: Function,\r\n        setNarrowState?: Function,\r\n        deleteEntry: Function\r\n    }) {\r\n\r\n    const [state, setState] = useState<tableDataEntry>({Amount: \"\"})\r\n\r\n    function makeDataList(propsState: dataListStateType[], id: string) {\r\n        return (\r\n            <datalist id={id}>\r\n                {propsState.map((entry: dataListStateType) => {\r\n                    return (\r\n                        <option\r\n                            value={entry.name}\r\n                            key={entry.id}\r\n                        />\r\n                    )\r\n                })}\r\n            </datalist>\r\n        )\r\n    }\r\n\r\n    function handleInputRowChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        let {name, value} = event.target;\r\n        setState({...state, [name]: value})\r\n    }\r\n\r\n    useEffect(() => {\r\n        setState(props.entry)\r\n    }, [props.entry])\r\n\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                {props.fields\r\n                    .filter(column => !column.name.includes(\"id\"))\r\n                    .map(column => {\r\n                        return (\r\n                            <td>\r\n                                {column.name === 'Amount' ? <span>$</span> : null}\r\n                                <input\r\n                                    name={column.name}\r\n                                    onBlur={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                        props.handleChange(e, props.i)\r\n                                    }}\r\n                                    onChange={handleInputRowChange}\r\n                                    className=\"tableInput\"\r\n                                    value={state[column.name as keyof tableDataEntry] || \"\"}\r\n                                    list={column.name}\r\n                                />\r\n                                {column.name === 'Source' && props.sourcesState ? (\r\n                                    makeDataList(props.sourcesState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Person' && props.personsState ? (\r\n                                    makeDataList(props.personsState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Narrow_category' && props.narrowState ? (\r\n                                    makeDataList(props.narrowState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Broad_category' && props.broadState ? (\r\n                                    makeDataList(props.broadState, column.name)\r\n                                ) : null}\r\n                                {column.name === 'Vendor' && props.vendorsState ? (\r\n                                    makeDataList(props.vendorsState, column.name)\r\n                                ) : null}\r\n                            </td>\r\n                        )\r\n                    })}\r\n                    <td>\r\n                        <button onClick={()=> props.deleteEntry(state.entry_id || state.id)}>Delete</button>\r\n                    </td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}","import React from 'react'\r\nimport type {tableDataEntry} from '../interfaces/Interfaces'\r\n\r\nexport default function StaticRow(props:\r\n    {\r\n        entry: tableDataEntry,\r\n        i: number,\r\n        fields: { name: string }[],\r\n    }) {\r\n\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                {props.fields\r\n                    .filter(column => !column.name.includes(\"id\"))\r\n                    .map(column => {\r\n                        return (\r\n                            <td key={props.i + column.name}>\r\n                                {column.name === 'Amount' ? <span>$</span> : null}\r\n                                <span\r\n                                    className=\"tableInput\"\r\n                                >{props.entry[column.name as keyof tableDataEntry] || \"\"}\r\n                                </span>\r\n\r\n                            </td>\r\n                        )\r\n                    })}\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}","import React from 'react'\r\nimport InputRow from './InputRow'\r\nimport StaticRow from './StaticRow'\r\nimport type {tableDataEntry, dataListStateType} from \"../interfaces/Interfaces\"\r\n\r\nexport default function Table(props:\r\n    {\r\n        state:\r\n        {\r\n            schema:\r\n            {\r\n                fields: { name: string }[]\r\n            },\r\n            data: tableDataEntry[]\r\n\r\n        },\r\n        sourcesState?: dataListStateType[],\r\n        personsState?: dataListStateType[],\r\n        broadState?: dataListStateType[],\r\n        narrowState?: dataListStateType[],\r\n        vendorsState?: dataListStateType[],\r\n        handleChange: Function,\r\n        setSourcesState?: Function,\r\n        setPersonsState?: Function,\r\n        setBroadState?: Function,\r\n        setNarrowState?: Function,\r\n        deleteEntry: Function,\r\n        form?: string\r\n    }) {\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    {props.state.schema.fields\r\n                        .filter(column => !column.name.includes(\"id\"))\r\n                        .map(column => {\r\n                            return (\r\n                                <th key={column.name}>\r\n                                    {column.name.replace(\"_\", \" \")}\r\n                                </th>\r\n                            )\r\n                        })}\r\n                </tr>\r\n            </thead>\r\n            {(props.state.data).map((entry: tableDataEntry, i: number) => {\r\n                return props.form === \"pivot\" ?\r\n                    <StaticRow\r\n                        entry={entry}\r\n                        i={i}\r\n                        key={entry.entry_id || entry.id}\r\n                        fields={props.state.schema.fields}\r\n                    /> :\r\n                    <InputRow\r\n                        entry={entry}\r\n                        i={i}\r\n                        key={i}\r\n                        fields={props.state.schema.fields}\r\n                        handleChange={props.handleChange}\r\n                        sourcesState={props.sourcesState}\r\n                        personsState={props.personsState}\r\n                        broadState={props.broadState}\r\n                        narrowState={props.narrowState}\r\n                        vendorsState={props.vendorsState}\r\n\r\n                        setPersonsState={props.setPersonsState}\r\n                        setSourcesState={props.setSourcesState}\r\n                        setBroadState={props.setBroadState}\r\n                        setNarrowState={props.setNarrowState}\r\n                        deleteEntry={props.deleteEntry}\r\n                    />\r\n            })}\r\n\r\n        </table>\r\n    )\r\n}","import type {dataListStateType, tableDataEntry, tableType} from '../interfaces/Interfaces'\r\n\r\n\r\nfunction checkStatus<T>(res: Response, parseMethod: string): Promise<T> {\r\n    if (res.status === 401) {\r\n        throw new Error(\"Unauthorized\")\r\n    }\r\n    if (parseMethod === 'json'){\r\n        return res.json() as Promise<T>\r\n    } else {\r\n        return res.text() as unknown as Promise<T>\r\n    }\r\n}\r\n\r\nconst API = {\r\n    expenses: function (token: string | null, yearMonthObj: { form: string, year: string, month: string }): Promise<{schema: { fields: [] }, data: tableDataEntry[]}> {\r\n        return fetch(`/api/expenses/${yearMonthObj.year}/${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<tableType>(res, 'json'))\r\n    },\r\n    deleteExpenses: function (token: string | null, id: number | undefined): Promise<Response | string> {\r\n        return fetch(`/api/expenses/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    updateExpenses: function (token: string | null, data: tableDataEntry): Promise<Response | string> {\r\n        return fetch(`/api/expenses/${data.entry_id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    income: function (token: string | null, yearMonthObj: { form: string, year: string, month: string }): Promise<{schema: { fields: [] }, data: tableDataEntry[]}> {\r\n        return fetch(`/api/income/${yearMonthObj.year}/${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<tableType>(res, 'json'))\r\n    },\r\n    updateIncome: function (token: string | null, data: tableDataEntry): Promise<Response | string> {\r\n        return fetch(`/api/income/${data.id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    deleteIncome: function (token: string | null, id: number | undefined): Promise<Response | string> {\r\n        return fetch(`/api/income/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<string>(res, 'text'))\r\n    },\r\n    pivot: function (token: string | null, yearMonthObj: { form: string, year: string, month: string }): Promise<{schema: { fields: [] }, data: tableDataEntry[]}> {\r\n        return fetch(`/api/expenses/pivot/${yearMonthObj.year}/${yearMonthObj.month}`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res=>checkStatus<tableType>(res, 'json'))\r\n    },\r\n    sources: function (token: string | null,): Promise<{ data: dataListStateType[] }> {\r\n        return fetch('/api/sources', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => checkStatus<{ data: dataListStateType[] }>(res, 'json'))\r\n    },\r\n    persons: function (token: string | null,): Promise<{ data: dataListStateType[] }> {\r\n        return fetch('/api/persons', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => checkStatus<{ data: dataListStateType[] }>(res, 'json'))\r\n    },\r\n    narrow: function (token: string | null,): Promise<{ data: dataListStateType[] }> {\r\n        return fetch('/api/narrows', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => checkStatus<{ data: dataListStateType[] }>(res, 'json'))\r\n    },\r\n    broad: function (token: string | null,): Promise<{ data: dataListStateType[] }> {\r\n        return fetch('/api/broads', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => checkStatus<{ data: dataListStateType[] }>(res, 'json'))\r\n    },\r\n    vendors: function (token: string | null,): Promise<{ data: dataListStateType[] }> {\r\n        return fetch('/api/vendors', {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res => checkStatus<{ data: dataListStateType[] }>(res, 'json'))\r\n    },\r\n    login: function (data: { username: string, password: string }): Promise<{ token: string }> {\r\n        return fetch('/auth/login', {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res => checkStatus<{ token: string }>(res, 'json'))\r\n    },\r\n    checkAuth: function (token: string | null): Promise<{username: string, token: string}> {\r\n        return fetch(`/auth/checkAuth`, {\r\n            headers: {\r\n                \"authorization\": `Bearer ${token}`\r\n            }\r\n        }).then(res =>checkStatus<{username: string, token: string}>(res, 'json'))\r\n    }\r\n}\r\n\r\nexport default API","import React, { useState, useEffect } from 'react';\r\nimport Table from '../components/Table';\r\nimport API from '../utils/API'\r\nimport { AuthContext } from '../App'\r\nimport type { tableDataEntry, dataListStateType, formStateType, InputName } from '../interfaces/Interfaces'\r\n\r\nfunction Home() {\r\n    const { Auth, setAuth } = React.useContext(AuthContext)\r\n    const [formState, setFormState] = useState<formStateType>(\r\n        {\r\n            form: \"income\",\r\n            year: \"\",\r\n            month: \"\"\r\n        }\r\n    )\r\n\r\n    const [incomeTableState, setIncomeTableState] = useState<{ schema: { fields: [] }, data: tableDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Date: \"\",\r\n                Source: \"\",\r\n                Person: \"\",\r\n                id: NaN,\r\n                source_id: NaN,\r\n                earner_id: NaN\r\n            }]\r\n        }\r\n    )\r\n\r\n    const [expensesTableState, setExpensesTableState] = useState<{ schema: { fields: [] }, data: tableDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Date: \"\",\r\n                Source: \"\",\r\n                Vendor: \"\",\r\n                Broad_category: \"\",\r\n                Narrow_category: \"\",\r\n                Person: \"\",\r\n                Notes: \"\",\r\n                entry_id: NaN\r\n            }]\r\n        }\r\n\r\n    )\r\n    const [pivotTableState, setPivotTableState] = useState<{ schema: { fields: [] }, data: tableDataEntry[] }>(\r\n        {\r\n            schema: { fields: [] },\r\n            data: [{\r\n                Amount: \"\",\r\n                Broad_category: \"\",\r\n                Narrow_category: \"\"\r\n            }]\r\n        }\r\n    )\r\n\r\n    // State for datalists\r\n    const [sourcesState, setSourcesState] = useState<dataListStateType[]>([])\r\n    const [personsState, setPersonsState] = useState<dataListStateType[]>([])\r\n    const [broadState, setBroadState] = useState<dataListStateType[]>([])\r\n    const [narrowState, setNarrowState] = useState<dataListStateType[]>([])\r\n    const [vendorsState, setVendorsState] = useState<dataListStateType[]>([])\r\n\r\n    function formatDates(entry: tableDataEntry): tableDataEntry {\r\n        if (!entry.Date) {\r\n            return entry\r\n        } else {\r\n            let date = new Date(entry.Date);\r\n            let year = date.getUTCFullYear();\r\n            let month = (1 + date.getUTCMonth()).toString();\r\n            month = month.length > 1 ? month : '0' + month;\r\n            let day = date.getUTCDate().toString();\r\n            day = day.length > 1 ? day : '0' + day;\r\n            let dateString = month + '/' + day + '/' + year;\r\n            entry.Date = dateString\r\n            return entry\r\n        }\r\n    }\r\n\r\n    function handleFormChange(event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>): void {\r\n        let { name, value } = event.target;\r\n        setFormState({ ...formState, [name]: value })\r\n    }\r\n\r\n    async function handleFormSubmit(event: React.SyntheticEvent): Promise<any> {\r\n        try {\r\n            event.preventDefault()\r\n            let route = formState.form\r\n            let response = await API[route](Auth.token, formState)\r\n            // Formatting the dates the hard way because javascript doesn't support strftime...\r\n            if (route !== 'pivot') {\r\n                response.data = response.data.map(formatDates)\r\n            }\r\n            switch (route) {\r\n                case \"expenses\":\r\n                    setExpensesTableState(response)\r\n                    break;\r\n                case \"income\":\r\n                    setIncomeTableState(response)\r\n                    break;\r\n                case \"pivot\":\r\n                    setPivotTableState(response)\r\n                    break;\r\n            }\r\n        } catch (err) {\r\n            if (err.message === \"Unauthorized\") {\r\n                setAuth({ type: 'LOGOUT' })\r\n            }\r\n        }\r\n    }\r\n\r\n    function assignId(\r\n        name: InputName,\r\n        value: string) {\r\n\r\n        let state;\r\n        let id;\r\n\r\n        switch (name) {\r\n            case \"Person\":\r\n                state = personsState;\r\n                id = 'person_id';\r\n                break;\r\n            case \"Source\":\r\n                state = sourcesState;\r\n                id = 'source_id';\r\n                break;\r\n            case \"Broad_category\":\r\n                state = broadState;\r\n                id = 'broad_category_id';\r\n                break;\r\n            case \"Narrow_category\":\r\n                state = narrowState;\r\n                id = 'narrow_category_id';\r\n                break;\r\n            case \"Vendor\":\r\n                state = vendorsState;\r\n                id = 'vendor_id';\r\n                break;\r\n        }\r\n        let dataListItem = state.filter((i: dataListStateType) => i.name === value)[0]\r\n        if (dataListItem) {\r\n            return { id: id, dataListItem: dataListItem }\r\n        } else {\r\n            return { id: null, dataListItem: null }\r\n        }\r\n    }\r\n\r\n    async function handleExpensesChange(event: React.ChangeEvent<HTMLInputElement>, index: number): Promise<void> {\r\n        try {\r\n            let { name, value } = event.target;\r\n            let newExpensesTableStateData: tableDataEntry[] = [...expensesTableState.data]\r\n            let updatedRow: tableDataEntry = { ...newExpensesTableStateData[index], [name]: value }\r\n            if (name === \"Person\" || name === \"Broad_category\" || name === \"Narrow_category\" || name === \"Vendor\") {\r\n                let { id, dataListItem } = assignId(name as InputName, value)\r\n                if (id && dataListItem) {\r\n                    updatedRow = { ...updatedRow, [id]: dataListItem.id }\r\n                }\r\n            }\r\n            newExpensesTableStateData[index] = updatedRow\r\n            setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\r\n            let res = await API.updateExpenses(Auth.token, updatedRow)\r\n            console.log(res)\r\n        } catch (err) {\r\n            console.error(err)\r\n            if (err.message === \"Unauthorized\") {\r\n                setAuth({ type: 'LOGOUT' })\r\n            }\r\n        }\r\n    }\r\n\r\n    async function handleIncomeChange(event: React.ChangeEvent<HTMLInputElement>, index: number): Promise<void> {\r\n        try {\r\n            let { name, value } = event.target;\r\n            let newIncomeTableStateData: tableDataEntry[] = [...incomeTableState.data]\r\n            let updatedRow: tableDataEntry = { ...newIncomeTableStateData[index], [name]: value }\r\n            if (name === \"Person\" || name === \"Source\") {\r\n                let { id, dataListItem } = assignId(name as InputName, value)\r\n                if (id && dataListItem) {\r\n                    updatedRow = { ...updatedRow, [id]: dataListItem.id }\r\n                }\r\n            }\r\n            newIncomeTableStateData[index] = updatedRow\r\n            setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\r\n            let res = await API.updateIncome(Auth.token, updatedRow)\r\n            console.log(res)\r\n        } catch (err) {\r\n            console.error(err)\r\n            if (err.message === 'Unauthorized') {\r\n                setAuth({ type: 'LOGOUT' })\r\n            }\r\n        }\r\n    }\r\n\r\n    async function deleteEntry(id: number | undefined) {\r\n        try {\r\n            if (formState.form === \"expenses\") {\r\n                await API.deleteExpenses(Auth.token, id);\r\n                let newExpensesTableStateData = expensesTableState.data.filter(entry => entry.entry_id !== id)\r\n                setExpensesTableState({ ...expensesTableState, data: newExpensesTableStateData })\r\n            } else if (formState.form === \"income\") {\r\n                await API.deleteIncome(Auth.token, id);\r\n                let newIncomeTableStateData = incomeTableState.data.filter(entry => entry.id !== id)\r\n                setIncomeTableState({ ...incomeTableState, data: newIncomeTableStateData })\r\n            }\r\n        } catch (err) {\r\n            console.error(err)\r\n            if (err === 'Unauthorized') {\r\n                setAuth({ type: 'LOGOUT' })\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function getDataLists(): Promise<void> {\r\n            let { data } = await API.sources(Auth.token)\r\n            setSourcesState(data)\r\n            let persons = await API.persons(Auth.token)\r\n            setPersonsState(persons.data)\r\n            let narrow = await API.narrow(Auth.token)\r\n            setNarrowState(narrow.data)\r\n            let broad = await API.broad(Auth.token)\r\n            setBroadState(broad.data)\r\n            let vendors = await API.vendors(Auth.token)\r\n            setVendorsState(vendors.data)\r\n        }\r\n        getDataLists()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"Home\">\r\n            <header className=\"header\">\r\n                <button className=\"logout\" onClick={() => setAuth({ type: 'LOGOUT' })}>Logout</button>\r\n                <h1>Finances!</h1>\r\n                {Auth.token ?\r\n                    <img src=\"/wallchart\" alt=\"Wall Chart\" />\r\n                    : null\r\n                }\r\n                <form onSubmit={handleFormSubmit} className=\"form-inline\">\r\n                    <select name=\"form\" value={formState.form} onChange={handleFormChange}>\r\n                        <option value=\"income\">Income</option>\r\n                        <option value=\"expenses\">Expenses</option>\r\n                        <option value=\"pivot\">Pivot Table</option>\r\n                    </select>\r\n                    <label htmlFor=\"year2\">Year</label>\r\n                    <input\r\n                        onChange={handleFormChange}\r\n                        value={formState.year}\r\n                        type=\"text\"\r\n                        id=\"year2\"\r\n                        className=\"form-control\"\r\n                        name=\"year\"\r\n                        placeholder=\"YYYY\"\r\n                    />\r\n                    <label htmlFor=\"month2\">Month</label>\r\n                    <input\r\n                        onChange={handleFormChange}\r\n                        value={formState.month}\r\n                        type=\"text\"\r\n                        id=\"month2\"\r\n                        className=\"form-control\"\r\n                        name=\"month\"\r\n                        placeholder=\"MM\" />\r\n                    <button className=\"btn btn-success\">Submit</button>\r\n                </form>\r\n            </header>\r\n            <div className=\"body\">\r\n                {formState.form === \"income\" && incomeTableState.data[0]?.id ? (\r\n                    <Table\r\n                        state={incomeTableState}\r\n                        sourcesState={sourcesState}\r\n                        personsState={personsState}\r\n                        handleChange={handleIncomeChange}\r\n                        setSourcesState={setSourcesState}\r\n                        setPersonsState={setPersonsState}\r\n                        deleteEntry={deleteEntry}\r\n                        form={formState.form}\r\n                    />\r\n                ) : null}\r\n                {formState.form === \"expenses\" && expensesTableState.data[0]?.entry_id ? (\r\n                    <Table\r\n                        state={expensesTableState}\r\n                        personsState={personsState}\r\n                        broadState={broadState}\r\n                        narrowState={narrowState}\r\n                        vendorsState={vendorsState}\r\n                        handleChange={handleExpensesChange}\r\n                        setPersonsState={setPersonsState}\r\n                        setBroadState={setBroadState}\r\n                        setNarrowState={setNarrowState}\r\n                        deleteEntry={deleteEntry}\r\n                        form={formState.form}\r\n                    />\r\n                ) : null}\r\n                {formState.form === \"pivot\" && pivotTableState ? (\r\n                    <Table\r\n                        state={pivotTableState}\r\n                        deleteEntry={deleteEntry}\r\n                        handleChange={() => false}\r\n                        form={formState.form}\r\n                    />\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport API from '../utils/API'\r\nimport {AuthContext} from '../App'\r\n\r\nexport default function Login() {\r\n    const {Auth, setAuth} = React.useContext(AuthContext)\r\n\r\n    const [loginFormState, setLoginFormState] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n    });\r\n\r\n    const [failure, setFailure] = useState(false)\r\n\r\n    const inputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = event.target;\r\n        setLoginFormState({\r\n            ...loginFormState,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const formSubmit = (event: React.SyntheticEvent) => {\r\n        event.preventDefault();\r\n        API.login(loginFormState).then(newToken => {\r\n            setAuth({type: 'LOGIN', payload: {user: 'blarvis', token: newToken.token}})\r\n        }).catch(err => setFailure(true))\r\n    }\r\n\r\n    if (Auth.loggedIn) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"Login\">\r\n                <form className=\"LoginForm\" onSubmit={formSubmit}>\r\n                    <h4>Login</h4>\r\n                    <div className=\"Response\">\r\n                        {failure ? <p>Incorrect username or password</p> : null}\r\n                    </div>\r\n                    <input\r\n                        onChange={inputChange}\r\n                        value={loginFormState.username}\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        placeholder=\"username\"\r\n                    />\r\n                    <input\r\n                        onChange={inputChange}\r\n                        value={loginFormState.password}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\"password\"\r\n                    />\r\n                    <button className=\"Btn\" name=\"login\" type=\"submit\">Login</button>\r\n                </form>\r\n            </div>\r\n        </>\r\n    );\r\n}","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router, Route, Redirect, RouteComponentProps } from 'react-router-dom'\nimport Home from './pages/Home'\nimport Login from './pages/Login'\nimport API from './utils/API'\nimport './App.css';\n\n// import Auth from './utils/Auth'\n\ninterface Auth {\n  loggedIn: boolean,\n  user: string,\n  token: string\n}\n\ninterface AuthState {\n  Auth: Auth,\n  setAuth: React.Dispatch<{ type: string; payload?: { user: string; token: string; } | undefined; }>\n}\n\nconst ProtectedRoute = ({ component: Component, loggedIn, ...rest }: {\n  path: string,\n  loggedIn: boolean,\n  setLoggedIn: Function,\n  component: React.FunctionComponent<RouteComponentProps>,\n}): JSX.Element => (\n    <Route {...rest} render={props => (\n      loggedIn\n        ? <Component {...props} />\n        : <Redirect to='/login' />\n    )\n    } />\n\n  )\n\n  export const AuthContext = React.createContext<AuthState>({\n    Auth: {\n      loggedIn: false,\n      user: \"\",\n      token: \"\"\n    },\n    setAuth: (): void => {}\n  })\n  \n  const reducer = (state: Auth, action: {type: string, payload?: {user: string, token: string}}): Auth => {\n    if (action.type === 'LOGIN' && action.payload) {\n      localStorage.setItem(\"user\", JSON.stringify(action.payload.user));\n      localStorage.setItem(\"token\", JSON.stringify(action.payload.token));\n      return {\n        ...state,\n        loggedIn: true,\n        user: action.payload.user,\n        token: action.payload.token\n      };\n    } else if (action.type === 'LOGOUT') {\n      localStorage.clear();\n      return {\n        ...state,\n        loggedIn: false,\n        user: \"\",\n        token: \"\",\n      };\n    } else {\n      return state;\n    }\n  \n};\n\n  export default function App() {\n  const [Auth, setAuth] = React.useReducer(reducer, {\n    loggedIn: false,\n    user: \"\",\n    token: \"\"\n  })\n    \n  useEffect(() => {\n    const token = localStorage.getItem(\"token\")\n    API.checkAuth(token)\n      .then(res => setAuth({type: 'LOGIN', payload: {user: res.username, token: res.token}}))\n      .catch(err => {\n        setAuth({type: 'LOGOUT'})\n      })\n  }, [])\n\n  return (\n    <AuthContext.Provider\n    value={{Auth, setAuth}}\n    >\n      <Router>\n        <ProtectedRoute path=\"/\"\n          loggedIn={Auth.loggedIn}\n          setLoggedIn={setAuth}\n          component={Home}\n        />\n        <Route exact path=\"/login\">\n          <Login />\n        </Route>\n      </Router>\n    </AuthContext.Provider>\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}